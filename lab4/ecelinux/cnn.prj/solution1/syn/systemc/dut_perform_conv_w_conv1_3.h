// ==============================================================
// File generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC
// Version: 2016.2
// Copyright (C) 1986-2016 Xilinx, Inc. All Rights Reserved.
// 
// ==============================================================

#ifndef __dut_perform_conv_w_conv1_3_H__
#define __dut_perform_conv_w_conv1_3_H__


#include <systemc>
using namespace sc_core;
using namespace sc_dt;




#include <iostream>
#include <fstream>

struct dut_perform_conv_w_conv1_3_ram : public sc_core::sc_module {

  static const unsigned DataWidth = 30;
  static const unsigned AddressRange = 4608;
  static const unsigned AddressWidth = 13;

//latency = 1
//input_reg = 1
//output_reg = 0
sc_core::sc_in <sc_lv<AddressWidth> > address0;
sc_core::sc_in <sc_logic> ce0;
sc_core::sc_out <sc_lv<DataWidth> > q0;
sc_core::sc_in <sc_lv<AddressWidth> > address1;
sc_core::sc_in <sc_logic> ce1;
sc_core::sc_out <sc_lv<DataWidth> > q1;
sc_core::sc_in<sc_logic> reset;
sc_core::sc_in<bool> clk;


sc_lv<DataWidth> ram[AddressRange];


   SC_CTOR(dut_perform_conv_w_conv1_3_ram) {
        ram[0] = "0b000000100000000110100000001110";
        ram[1] = "0b111011101111110100001010110111";
        ram[2] = "0b110110111000011010001011000000";
        ram[3] = "0b110000010010000001101100000000";
        ram[4] = "0b110101011010110010000000001111";
        ram[5] = "0b000101101011001101011111110111";
        ram[6] = "0b000011111001111101101011001011";
        ram[7] = "0b000111101000000000111101010000";
        ram[8] = "0b110011000010111101001010111111";
        ram[9] = "0b000100011000111010000111010000";
        ram[10] = "0b111100010010011100010110010111";
        ram[11] = "0b001110110000011011110001000000";
        ram[12] = "0b000011001011011011101010100011";
        ram[13] = "0b000101011111101001001000001000";
        ram[14] = "0b111111000111101010010010110010";
        ram[15] = "0b110110011111011111010101100000";
        ram[16] = "0b111101000000101001100001101111";
        ram[17] = "0b000111000001010111101000110111";
        ram[18] = "0b000110001111111011001010010000";
        ram[19] = "0b000111010111011000110011110111";
        ram[20] = "0b111001101110100011001001010111";
        ram[21] = "0b000011000110000110010110011011";
        ram[22] = "0b111110110000010011100011011100";
        ram[23] = "0b111001010011000100110110101000";
        ram[24] = "0b111100011000001100110111101000";
        ram[25] = "0b000010100001101011111110000000";
        ram[26] = "0b000000000010000001111110001101";
        ram[27] = "0b000110000001011110100001110000";
        ram[28] = "0b101101111100010001011001100000";
        ram[29] = "0b000011011000101000110001001111";
        ram[30] = "0b101111110010001000110001000000";
        ram[31] = "0b000001111001101111000010010010";
        ram[32] = "0b111100010110110101110010101111";
        ram[33] = "0b001110100011011111000000100000";
        ram[34] = "0b000110100111011011010010010000";
        ram[35] = "0b000010011101111100000011000011";
        ram[36] = "0b000011101110111011001110000111";
        ram[37] = "0b000101011101101001010001100000";
        ram[38] = "0b110010111000010111101111100000";
        ram[39] = "0b111011110001000000111000110000";
        ram[40] = "0b000011111111001101111011001111";
        ram[41] = "0b111011111011101100001101101111";
        ram[42] = "0b000111011100100011101101011111";
        ram[43] = "0b111001101100101110111000101000";
        ram[44] = "0b001010110010101000101011101111";
        ram[45] = "0b000100100000101101100000001000";
        ram[46] = "0b110010000110111111111100100000";
        ram[47] = "0b101111010101010111010100000000";
        ram[48] = "0b000101100010010111110000001111";
        ram[49] = "0b110100101101001011100011000000";
        ram[50] = "0b111110011011111110111010011101";
        ram[51] = "0b000110000011101001010011010111";
        ram[52] = "0b001110000101110000001000001111";
        ram[53] = "0b000001011100101010101101100011";
        ram[54] = "0b111111110100110000100100000001";
        ram[55] = "0b111101100000100010110100101011";
        ram[56] = "0b111110101110111101011100000011";
        ram[57] = "0b111100111111110101010001001100";
        ram[58] = "0b110001000001010110001001011111";
        ram[59] = "0b111000010111010011110110010000";
        ram[60] = "0b111111000011010000111011010010";
        ram[61] = "0b001011001000101010001111010000";
        ram[62] = "0b000000010101101001000101111010";
        ram[63] = "0b001010101100011010101100011111";
        ram[64] = "0b001101110010010101011000011111";
        ram[65] = "0b000110110100000001101110101000";
        ram[66] = "0b111011001100011110100001000000";
        ram[67] = "0b110001100010111001100100110000";
        ram[68] = "0b000000100100100110011110000101";
        ram[69] = "0b000001010010011010101010010111";
        ram[70] = "0b000101011110000010110110010111";
        ram[71] = "0b110100000100101000110100101111";
        for (unsigned i = 72; i < 4608 ; i = i + 1) {
            ram[i] = "0b000000000000000000000000000000";
        }


SC_METHOD(prc_write_0);
  sensitive<<clk.pos();


SC_METHOD(prc_write_1);
  sensitive<<clk.pos();
   }


void prc_write_0()
{
    if (ce0.read() == sc_dt::Log_1) 
    {
            if(address0.read().is_01() && address0.read().to_uint()<AddressRange)
              q0 = ram[address0.read().to_uint()];
            else
              q0 = sc_lv<DataWidth>();
    }
}


void prc_write_1()
{
    if (ce1.read() == sc_dt::Log_1) 
    {
            if(address1.read().is_01() && address1.read().to_uint()<AddressRange)
              q1 = ram[address1.read().to_uint()];
            else
              q1 = sc_lv<DataWidth>();
    }
}


}; //endmodule


SC_MODULE(dut_perform_conv_w_conv1_3) {


static const unsigned DataWidth = 30;
static const unsigned AddressRange = 4608;
static const unsigned AddressWidth = 13;

sc_core::sc_in <sc_lv<AddressWidth> > address0;
sc_core::sc_in<sc_logic> ce0;
sc_core::sc_out <sc_lv<DataWidth> > q0;
sc_core::sc_in <sc_lv<AddressWidth> > address1;
sc_core::sc_in<sc_logic> ce1;
sc_core::sc_out <sc_lv<DataWidth> > q1;
sc_core::sc_in<sc_logic> reset;
sc_core::sc_in<bool> clk;


dut_perform_conv_w_conv1_3_ram* meminst;


SC_CTOR(dut_perform_conv_w_conv1_3) {
meminst = new dut_perform_conv_w_conv1_3_ram("dut_perform_conv_w_conv1_3_ram");
meminst->address0(address0);
meminst->ce0(ce0);
meminst->q0(q0);

meminst->address1(address1);
meminst->ce1(ce1);
meminst->q1(q1);

meminst->reset(reset);
meminst->clk(clk);
}
~dut_perform_conv_w_conv1_3() {
    delete meminst;
}


};//endmodule
#endif
