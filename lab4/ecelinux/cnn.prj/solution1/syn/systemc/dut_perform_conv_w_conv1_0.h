// ==============================================================
// File generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC
// Version: 2016.2
// Copyright (C) 1986-2016 Xilinx, Inc. All Rights Reserved.
// 
// ==============================================================

#ifndef __dut_perform_conv_w_conv1_0_H__
#define __dut_perform_conv_w_conv1_0_H__


#include <systemc>
using namespace sc_core;
using namespace sc_dt;




#include <iostream>
#include <fstream>

struct dut_perform_conv_w_conv1_0_ram : public sc_core::sc_module {

  static const unsigned DataWidth = 30;
  static const unsigned AddressRange = 4608;
  static const unsigned AddressWidth = 13;

//latency = 1
//input_reg = 1
//output_reg = 0
sc_core::sc_in <sc_lv<AddressWidth> > address0;
sc_core::sc_in <sc_logic> ce0;
sc_core::sc_out <sc_lv<DataWidth> > q0;
sc_core::sc_in <sc_lv<AddressWidth> > address1;
sc_core::sc_in <sc_logic> ce1;
sc_core::sc_out <sc_lv<DataWidth> > q1;
sc_core::sc_in<sc_logic> reset;
sc_core::sc_in<bool> clk;


sc_lv<DataWidth> ram[AddressRange];


   SC_CTOR(dut_perform_conv_w_conv1_0_ram) {
        ram[0] = "0b110111101101110100011101001111";
        ram[1] = "0b110111111000111000001100001111";
        ram[2] = "0b000101011101110001110000011111";
        ram[3] = "0b001101110110000011101010001111";
        ram[4] = "0b000000111111100111010001100100";
        ram[5] = "0b111101001101101011101110001111";
        ram[6] = "0b110110001010000010100111101111";
        ram[7] = "0b000011110100110011000000011011";
        ram[8] = "0b110100101001111001011100011111";
        ram[9] = "0b110100110111000000010000100000";
        ram[10] = "0b101110011000101111001111111111";
        ram[11] = "0b000111111110011110101100100000";
        ram[12] = "0b111011010100101101010010010000";
        ram[13] = "0b000000011000011100000100001000";
        ram[14] = "0b110011100010111000010001000000";
        ram[15] = "0b110011111101010101101111000000";
        ram[16] = "0b111011011101110000101111111000";
        ram[17] = "0b000110110011111100100101010000";
        ram[18] = "0b110101000010100011000011010000";
        ram[19] = "0b000010111010000000110001011100";
        ram[20] = "0b110011010100110100001110001111";
        ram[21] = "0b000001000111000111011001010000";
        ram[22] = "0b101110011011101010001111111111";
        ram[23] = "0b111011101010000010100010101111";
        ram[24] = "0b000101100010001000011001001000";
        ram[25] = "0b000100110010011101000100000111";
        ram[26] = "0b110110010111100000000111011111";
        ram[27] = "0b000011000100011111111010101100";
        ram[28] = "0b110110111001010101100101111111";
        ram[29] = "0b111100101001001111001110110000";
        ram[30] = "0b110010001001011100110100010000";
        ram[31] = "0b110111010100101100010101010000";
        ram[32] = "0b110100011111111100110101110000";
        ram[33] = "0b111111110010011111011000111000";
        ram[34] = "0b111110000001010001110000110010";
        ram[35] = "0b000011011011100000110101101000";
        ram[36] = "0b000001011011111110101011000011";
        ram[37] = "0b001110100011111101111101100000";
        ram[38] = "0b111100010101110111001000101100";
        ram[39] = "0b000101010100111110110100000000";
        ram[40] = "0b111010001111101011111100101111";
        ram[41] = "0b001010000011101011100001011111";
        ram[42] = "0b111110011111100111010111000000";
        ram[43] = "0b000111111010110110000110011000";
        ram[44] = "0b001000001111100000111111110000";
        ram[45] = "0b000011111101100111100110000000";
        ram[46] = "0b000010110110111010100001010100";
        ram[47] = "0b111000000010101111001001100111";
        ram[48] = "0b000111111010011010011010111000";
        ram[49] = "0b111000001001111110111000101000";
        ram[50] = "0b000010000001110101100101100000";
        ram[51] = "0b000110111101000011111100010111";
        ram[52] = "0b001001011101110011011100101111";
        ram[53] = "0b111000110000010000010100100000";
        ram[54] = "0b000011111100110101110101111000";
        ram[55] = "0b111011001000000100001010001111";
        ram[56] = "0b110101010010101000011011000000";
        ram[57] = "0b110110111011000000101100110000";
        ram[58] = "0b001111100001011011111001001111";
        ram[59] = "0b111101011110110101010001110000";
        ram[60] = "0b111110111001010100011110010110";
        ram[61] = "0b111010001001100111001100010111";
        ram[62] = "0b111001101110001101000000101000";
        ram[63] = "0b111000110101100100010011111000";
        ram[64] = "0b000111011011011000000111001111";
        ram[65] = "0b000000100111011011010110101100";
        ram[66] = "0b110110010110101110110001100000";
        ram[67] = "0b001000001000011111111101101111";
        ram[68] = "0b000111011110010001011011101000";
        ram[69] = "0b000001000010010100000010100011";
        ram[70] = "0b000100110110000100110000010111";
        ram[71] = "0b111101011111011011111110110011";
        for (unsigned i = 72; i < 4608 ; i = i + 1) {
            ram[i] = "0b000000000000000000000000000000";
        }


SC_METHOD(prc_write_0);
  sensitive<<clk.pos();


SC_METHOD(prc_write_1);
  sensitive<<clk.pos();
   }


void prc_write_0()
{
    if (ce0.read() == sc_dt::Log_1) 
    {
            if(address0.read().is_01() && address0.read().to_uint()<AddressRange)
              q0 = ram[address0.read().to_uint()];
            else
              q0 = sc_lv<DataWidth>();
    }
}


void prc_write_1()
{
    if (ce1.read() == sc_dt::Log_1) 
    {
            if(address1.read().is_01() && address1.read().to_uint()<AddressRange)
              q1 = ram[address1.read().to_uint()];
            else
              q1 = sc_lv<DataWidth>();
    }
}


}; //endmodule


SC_MODULE(dut_perform_conv_w_conv1_0) {


static const unsigned DataWidth = 30;
static const unsigned AddressRange = 4608;
static const unsigned AddressWidth = 13;

sc_core::sc_in <sc_lv<AddressWidth> > address0;
sc_core::sc_in<sc_logic> ce0;
sc_core::sc_out <sc_lv<DataWidth> > q0;
sc_core::sc_in <sc_lv<AddressWidth> > address1;
sc_core::sc_in<sc_logic> ce1;
sc_core::sc_out <sc_lv<DataWidth> > q1;
sc_core::sc_in<sc_logic> reset;
sc_core::sc_in<bool> clk;


dut_perform_conv_w_conv1_0_ram* meminst;


SC_CTOR(dut_perform_conv_w_conv1_0) {
meminst = new dut_perform_conv_w_conv1_0_ram("dut_perform_conv_w_conv1_0_ram");
meminst->address0(address0);
meminst->ce0(ce0);
meminst->q0(q0);

meminst->address1(address1);
meminst->ce1(ce1);
meminst->q1(q1);

meminst->reset(reset);
meminst->clk(clk);
}
~dut_perform_conv_w_conv1_0() {
    delete meminst;
}


};//endmodule
#endif
