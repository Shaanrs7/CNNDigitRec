// ==============================================================
// File generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC
// Version: 2016.2
// Copyright (C) 1986-2016 Xilinx, Inc. All Rights Reserved.
// 
// ==============================================================

#ifndef __dut_perform_conv_1_b_conv2_H__
#define __dut_perform_conv_1_b_conv2_H__


#include <systemc>
using namespace sc_core;
using namespace sc_dt;




#include <iostream>
#include <fstream>

struct dut_perform_conv_1_b_conv2_ram : public sc_core::sc_module {

  static const unsigned DataWidth = 27;
  static const unsigned AddressRange = 64;
  static const unsigned AddressWidth = 6;

//latency = 1
//input_reg = 1
//output_reg = 0
sc_core::sc_in <sc_lv<AddressWidth> > address0;
sc_core::sc_in <sc_logic> ce0;
sc_core::sc_out <sc_lv<DataWidth> > q0;
sc_core::sc_in<sc_logic> reset;
sc_core::sc_in<bool> clk;


sc_lv<DataWidth> ram[AddressRange];


   SC_CTOR(dut_perform_conv_1_b_conv2_ram) {
        ram[0] = "0b110110101110100101101110000";
        ram[1] = "0b110110001001010111111010000";
        ram[2] = "0b110111011000111010100010111";
        ram[3] = "0b110010100001001101110000000";
        ram[4] = "0b110011111111010001100110111";
        ram[5] = "0b111000100111100001101010111";
        ram[6] = "0b101111100110100000010000000";
        ram[7] = "0b111001011111011000000001000";
        ram[8] = "0b110101000100111101100101000";
        ram[9] = "0b110011001001100000100111111";
        ram[10] = "0b111100100011101100101000111";
        ram[11] = "0b111001111000011110101111000";
        ram[12] = "0b110011101000101100101000111";
        ram[13] = "0b110100100111001110010110000";
        ram[14] = "0b111000000111100101101101000";
        ram[15] = "0b110000100000110110001111000";
        ram[16] = "0b110101000010111100001000111";
        ram[17] = "0b110100100100010011100111000";
        ram[18] = "0b110110011000100001000111000";
        ram[19] = "0b110100011100010011101011111";
        ram[20] = "0b111010101001000011001101111";
        ram[21] = "0b110111010111001101010000000";
        ram[22] = "0b111000011100000011101001000";
        ram[23] = "0b110010011100101001101011111";
        ram[24] = "0b110110010111011011111101000";
        ram[25] = "0b110111001101110100100110000";
        ram[26] = "0b110111010111110010111010111";
        ram[27] = "0b110010011100101100110010111";
        ram[28] = "0b110101101010000111110110111";
        ram[29] = "0b110100110010101101101111111";
        ram[30] = "0b111000101111100101111000111";
        ram[31] = "0b110011111000101000010010111";
        ram[32] = "0b110101110011100111011001111";
        ram[33] = "0b110100010111000001001111111";
        ram[34] = "0b111001110010001100110110111";
        ram[35] = "0b111000010001011101100011111";
        ram[36] = "0b110111011011010110011101000";
        ram[37] = "0b110011111010010110100010111";
        ram[38] = "0b110101000111000101101000111";
        ram[39] = "0b110111111010101111011010111";
        ram[40] = "0b111000000000101100101000111";
        ram[41] = "0b110011110011101000110000111";
        ram[42] = "0b110110110100011000010010111";
        ram[43] = "0b111011100000110010000010111";
        ram[44] = "0b110101001111010011111011111";
        ram[45] = "0b110110010011110111000001111";
        ram[46] = "0b110101101101100011000001111";
        ram[47] = "0b110101100111110010010001000";
        ram[48] = "0b101110011001111100101001000";
        ram[49] = "0b111000100000110100100100000";
        ram[50] = "0b110101110000001010011101000";
        ram[51] = "0b110010100111010101001001000";
        ram[52] = "0b110111000000110001101111111";
        ram[53] = "0b111010101111100000000010111";
        ram[54] = "0b111100011110000111101001000";
        ram[55] = "0b111000101011011110011100111";
        ram[56] = "0b110111011110111001110100111";
        ram[57] = "0b110111100101011011000000111";
        ram[58] = "0b110111011100111100001011111";
        ram[59] = "0b110011001100110011001101000";
        ram[60] = "0b111000111100011001110011111";
        ram[61] = "0b110101000111100100100101111";
        ram[62] = "0b110000101111011010110110000";
        ram[63] = "0b110000001111011110011101111";


SC_METHOD(prc_write_0);
  sensitive<<clk.pos();
   }


void prc_write_0()
{
    if (ce0.read() == sc_dt::Log_1) 
    {
            if(address0.read().is_01() && address0.read().to_uint()<AddressRange)
              q0 = ram[address0.read().to_uint()];
            else
              q0 = sc_lv<DataWidth>();
    }
}


}; //endmodule


SC_MODULE(dut_perform_conv_1_b_conv2) {


static const unsigned DataWidth = 27;
static const unsigned AddressRange = 64;
static const unsigned AddressWidth = 6;

sc_core::sc_in <sc_lv<AddressWidth> > address0;
sc_core::sc_in<sc_logic> ce0;
sc_core::sc_out <sc_lv<DataWidth> > q0;
sc_core::sc_in<sc_logic> reset;
sc_core::sc_in<bool> clk;


dut_perform_conv_1_b_conv2_ram* meminst;


SC_CTOR(dut_perform_conv_1_b_conv2) {
meminst = new dut_perform_conv_1_b_conv2_ram("dut_perform_conv_1_b_conv2_ram");
meminst->address0(address0);
meminst->ce0(ce0);
meminst->q0(q0);

meminst->reset(reset);
meminst->clk(clk);
}
~dut_perform_conv_1_b_conv2() {
    delete meminst;
}


};//endmodule
#endif
