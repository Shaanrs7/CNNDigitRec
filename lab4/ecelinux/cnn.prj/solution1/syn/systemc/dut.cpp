// ==============================================================
// RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC
// Version: 2016.2
// Copyright (C) 1986-2016 Xilinx, Inc. All Rights Reserved.
// 
// ===========================================================

#include "dut.h"
#include "AESL_pkg.h"

using namespace std;

namespace ap_rtl {

const sc_logic dut::ap_const_logic_1 = sc_dt::Log_1;
const sc_logic dut::ap_const_logic_0 = sc_dt::Log_0;
const sc_lv<5> dut::ap_ST_st1_fsm_0 = "1";
const sc_lv<5> dut::ap_ST_st2_fsm_1 = "10";
const sc_lv<5> dut::ap_ST_st3_fsm_2 = "100";
const sc_lv<5> dut::ap_ST_st4_fsm_3 = "1000";
const sc_lv<5> dut::ap_ST_st5_fsm_4 = "10000";
const sc_lv<32> dut::ap_const_lv32_0 = "00000000000000000000000000000000";
const sc_lv<1> dut::ap_const_lv1_1 = "1";
const sc_lv<32> dut::ap_const_lv32_1 = "1";
const sc_lv<32> dut::ap_const_lv32_4 = "100";
const sc_lv<32> dut::ap_const_lv32_3 = "11";
const sc_lv<1> dut::ap_const_lv1_0 = "0";
const sc_lv<10> dut::ap_const_lv10_0 = "0000000000";
const sc_lv<32> dut::ap_const_lv32_2 = "10";
const sc_lv<10> dut::ap_const_lv10_240 = "1001000000";
const sc_lv<10> dut::ap_const_lv10_1 = "1";

dut::dut(sc_module_name name) : sc_module(name), mVcdFile(0) {
    result_U = new dut_result("result_U");
    result_U->clk(ap_clk);
    result_U->reset(ap_rst);
    result_U->address0(result_address0);
    result_U->ce0(result_ce0);
    result_U->we0(grp_dut_cnn_xcel_fu_106_output_V_we0);
    result_U->d0(grp_dut_cnn_xcel_fu_106_output_V_d0);
    result_U->q0(result_q0);
    grp_dut_cnn_xcel_fu_106 = new dut_cnn_xcel("grp_dut_cnn_xcel_fu_106");
    grp_dut_cnn_xcel_fu_106->ap_clk(ap_clk);
    grp_dut_cnn_xcel_fu_106->ap_rst(ap_rst);
    grp_dut_cnn_xcel_fu_106->ap_start(grp_dut_cnn_xcel_fu_106_ap_start);
    grp_dut_cnn_xcel_fu_106->ap_done(grp_dut_cnn_xcel_fu_106_ap_done);
    grp_dut_cnn_xcel_fu_106->ap_idle(grp_dut_cnn_xcel_fu_106_ap_idle);
    grp_dut_cnn_xcel_fu_106->ap_ready(grp_dut_cnn_xcel_fu_106_ap_ready);
    grp_dut_cnn_xcel_fu_106->input_V(p_Result_s_reg_154);
    grp_dut_cnn_xcel_fu_106->output_V_address0(grp_dut_cnn_xcel_fu_106_output_V_address0);
    grp_dut_cnn_xcel_fu_106->output_V_ce0(grp_dut_cnn_xcel_fu_106_output_V_ce0);
    grp_dut_cnn_xcel_fu_106->output_V_we0(grp_dut_cnn_xcel_fu_106_output_V_we0);
    grp_dut_cnn_xcel_fu_106->output_V_d0(grp_dut_cnn_xcel_fu_106_output_V_d0);

    SC_METHOD(thread_ap_clk_no_reset_);
    dont_initialize();
    sensitive << ( ap_clk.pos() );

    SC_METHOD(thread_ap_done);
    sensitive << ( ap_sig_cseq_ST_st4_fsm_3 );
    sensitive << ( exitcond_fu_132_p2 );

    SC_METHOD(thread_ap_idle);
    sensitive << ( ap_start );
    sensitive << ( ap_sig_cseq_ST_st1_fsm_0 );

    SC_METHOD(thread_ap_ready);
    sensitive << ( ap_sig_cseq_ST_st4_fsm_3 );
    sensitive << ( exitcond_fu_132_p2 );

    SC_METHOD(thread_ap_sig_110);
    sensitive << ( ap_CS_fsm );

    SC_METHOD(thread_ap_sig_20);
    sensitive << ( ap_CS_fsm );

    SC_METHOD(thread_ap_sig_44);
    sensitive << ( ap_CS_fsm );

    SC_METHOD(thread_ap_sig_53);
    sensitive << ( ap_CS_fsm );

    SC_METHOD(thread_ap_sig_59);
    sensitive << ( ap_start );
    sensitive << ( strm_in_V_V_empty_n );

    SC_METHOD(thread_ap_sig_73);
    sensitive << ( ap_CS_fsm );

    SC_METHOD(thread_ap_sig_cseq_ST_st1_fsm_0);
    sensitive << ( ap_sig_20 );

    SC_METHOD(thread_ap_sig_cseq_ST_st2_fsm_1);
    sensitive << ( ap_sig_44 );

    SC_METHOD(thread_ap_sig_cseq_ST_st3_fsm_2);
    sensitive << ( ap_sig_110 );

    SC_METHOD(thread_ap_sig_cseq_ST_st4_fsm_3);
    sensitive << ( ap_sig_73 );

    SC_METHOD(thread_ap_sig_cseq_ST_st5_fsm_4);
    sensitive << ( ap_sig_53 );

    SC_METHOD(thread_exitcond_fu_132_p2);
    sensitive << ( ap_sig_cseq_ST_st4_fsm_3 );
    sensitive << ( i_reg_95 );

    SC_METHOD(thread_grp_dut_cnn_xcel_fu_106_ap_start);
    sensitive << ( ap_reg_grp_dut_cnn_xcel_fu_106_ap_start );

    SC_METHOD(thread_i_1_fu_138_p2);
    sensitive << ( i_reg_95 );

    SC_METHOD(thread_p_Result_s_fu_124_p3);
    sensitive << ( tmp_V_2_reg_149 );
    sensitive << ( tmp_44_fu_120_p1 );

    SC_METHOD(thread_result_address0);
    sensitive << ( ap_sig_cseq_ST_st4_fsm_3 );
    sensitive << ( grp_dut_cnn_xcel_fu_106_output_V_address0 );
    sensitive << ( ap_sig_cseq_ST_st3_fsm_2 );
    sensitive << ( tmp_fu_144_p1 );

    SC_METHOD(thread_result_ce0);
    sensitive << ( ap_sig_cseq_ST_st4_fsm_3 );
    sensitive << ( grp_dut_cnn_xcel_fu_106_output_V_ce0 );
    sensitive << ( ap_sig_cseq_ST_st3_fsm_2 );

    SC_METHOD(thread_strm_in_V_V_blk_n);
    sensitive << ( ap_start );
    sensitive << ( ap_sig_cseq_ST_st1_fsm_0 );
    sensitive << ( strm_in_V_V_empty_n );
    sensitive << ( ap_sig_cseq_ST_st2_fsm_1 );

    SC_METHOD(thread_strm_in_V_V_read);
    sensitive << ( ap_sig_cseq_ST_st1_fsm_0 );
    sensitive << ( strm_in_V_V_empty_n );
    sensitive << ( ap_sig_cseq_ST_st2_fsm_1 );
    sensitive << ( ap_sig_59 );

    SC_METHOD(thread_strm_out_V_V_blk_n);
    sensitive << ( strm_out_V_V_full_n );
    sensitive << ( ap_sig_cseq_ST_st5_fsm_4 );

    SC_METHOD(thread_strm_out_V_V_din);
    sensitive << ( strm_out_V_V_full_n );
    sensitive << ( ap_sig_cseq_ST_st5_fsm_4 );
    sensitive << ( result_q0 );

    SC_METHOD(thread_strm_out_V_V_write);
    sensitive << ( strm_out_V_V_full_n );
    sensitive << ( ap_sig_cseq_ST_st5_fsm_4 );

    SC_METHOD(thread_tmp_44_fu_120_p1);
    sensitive << ( strm_in_V_V_dout );

    SC_METHOD(thread_tmp_fu_144_p1);
    sensitive << ( i_reg_95 );

    SC_METHOD(thread_ap_NS_fsm);
    sensitive << ( ap_CS_fsm );
    sensitive << ( strm_in_V_V_empty_n );
    sensitive << ( strm_out_V_V_full_n );
    sensitive << ( ap_sig_59 );
    sensitive << ( exitcond_fu_132_p2 );
    sensitive << ( grp_dut_cnn_xcel_fu_106_ap_done );

    SC_THREAD(thread_hdltv_gen);
    sensitive << ( ap_clk.pos() );

    ap_CS_fsm = "00001";
    ap_reg_grp_dut_cnn_xcel_fu_106_ap_start = SC_LOGIC_0;
    static int apTFileNum = 0;
    stringstream apTFilenSS;
    apTFilenSS << "dut_sc_trace_" << apTFileNum ++;
    string apTFn = apTFilenSS.str();
    mVcdFile = sc_create_vcd_trace_file(apTFn.c_str());
    mVcdFile->set_time_unit(1, SC_PS);
    if (1) {
#ifdef __HLS_TRACE_LEVEL_PORT__
    sc_trace(mVcdFile, ap_clk, "(port)ap_clk");
    sc_trace(mVcdFile, ap_rst, "(port)ap_rst");
    sc_trace(mVcdFile, ap_start, "(port)ap_start");
    sc_trace(mVcdFile, ap_done, "(port)ap_done");
    sc_trace(mVcdFile, ap_idle, "(port)ap_idle");
    sc_trace(mVcdFile, ap_ready, "(port)ap_ready");
    sc_trace(mVcdFile, strm_in_V_V_dout, "(port)strm_in_V_V_dout");
    sc_trace(mVcdFile, strm_in_V_V_empty_n, "(port)strm_in_V_V_empty_n");
    sc_trace(mVcdFile, strm_in_V_V_read, "(port)strm_in_V_V_read");
    sc_trace(mVcdFile, strm_out_V_V_din, "(port)strm_out_V_V_din");
    sc_trace(mVcdFile, strm_out_V_V_full_n, "(port)strm_out_V_V_full_n");
    sc_trace(mVcdFile, strm_out_V_V_write, "(port)strm_out_V_V_write");
#endif
#ifdef __HLS_TRACE_LEVEL_INT__
    sc_trace(mVcdFile, ap_CS_fsm, "ap_CS_fsm");
    sc_trace(mVcdFile, ap_sig_cseq_ST_st1_fsm_0, "ap_sig_cseq_ST_st1_fsm_0");
    sc_trace(mVcdFile, ap_sig_20, "ap_sig_20");
    sc_trace(mVcdFile, strm_in_V_V_blk_n, "strm_in_V_V_blk_n");
    sc_trace(mVcdFile, ap_sig_cseq_ST_st2_fsm_1, "ap_sig_cseq_ST_st2_fsm_1");
    sc_trace(mVcdFile, ap_sig_44, "ap_sig_44");
    sc_trace(mVcdFile, strm_out_V_V_blk_n, "strm_out_V_V_blk_n");
    sc_trace(mVcdFile, ap_sig_cseq_ST_st5_fsm_4, "ap_sig_cseq_ST_st5_fsm_4");
    sc_trace(mVcdFile, ap_sig_53, "ap_sig_53");
    sc_trace(mVcdFile, tmp_V_2_reg_149, "tmp_V_2_reg_149");
    sc_trace(mVcdFile, ap_sig_59, "ap_sig_59");
    sc_trace(mVcdFile, p_Result_s_fu_124_p3, "p_Result_s_fu_124_p3");
    sc_trace(mVcdFile, p_Result_s_reg_154, "p_Result_s_reg_154");
    sc_trace(mVcdFile, i_1_fu_138_p2, "i_1_fu_138_p2");
    sc_trace(mVcdFile, i_1_reg_162, "i_1_reg_162");
    sc_trace(mVcdFile, ap_sig_cseq_ST_st4_fsm_3, "ap_sig_cseq_ST_st4_fsm_3");
    sc_trace(mVcdFile, ap_sig_73, "ap_sig_73");
    sc_trace(mVcdFile, exitcond_fu_132_p2, "exitcond_fu_132_p2");
    sc_trace(mVcdFile, result_address0, "result_address0");
    sc_trace(mVcdFile, result_ce0, "result_ce0");
    sc_trace(mVcdFile, result_q0, "result_q0");
    sc_trace(mVcdFile, grp_dut_cnn_xcel_fu_106_ap_start, "grp_dut_cnn_xcel_fu_106_ap_start");
    sc_trace(mVcdFile, grp_dut_cnn_xcel_fu_106_ap_done, "grp_dut_cnn_xcel_fu_106_ap_done");
    sc_trace(mVcdFile, grp_dut_cnn_xcel_fu_106_ap_idle, "grp_dut_cnn_xcel_fu_106_ap_idle");
    sc_trace(mVcdFile, grp_dut_cnn_xcel_fu_106_ap_ready, "grp_dut_cnn_xcel_fu_106_ap_ready");
    sc_trace(mVcdFile, grp_dut_cnn_xcel_fu_106_output_V_address0, "grp_dut_cnn_xcel_fu_106_output_V_address0");
    sc_trace(mVcdFile, grp_dut_cnn_xcel_fu_106_output_V_ce0, "grp_dut_cnn_xcel_fu_106_output_V_ce0");
    sc_trace(mVcdFile, grp_dut_cnn_xcel_fu_106_output_V_we0, "grp_dut_cnn_xcel_fu_106_output_V_we0");
    sc_trace(mVcdFile, grp_dut_cnn_xcel_fu_106_output_V_d0, "grp_dut_cnn_xcel_fu_106_output_V_d0");
    sc_trace(mVcdFile, i_reg_95, "i_reg_95");
    sc_trace(mVcdFile, ap_sig_cseq_ST_st3_fsm_2, "ap_sig_cseq_ST_st3_fsm_2");
    sc_trace(mVcdFile, ap_sig_110, "ap_sig_110");
    sc_trace(mVcdFile, ap_reg_grp_dut_cnn_xcel_fu_106_ap_start, "ap_reg_grp_dut_cnn_xcel_fu_106_ap_start");
    sc_trace(mVcdFile, tmp_fu_144_p1, "tmp_fu_144_p1");
    sc_trace(mVcdFile, tmp_44_fu_120_p1, "tmp_44_fu_120_p1");
    sc_trace(mVcdFile, ap_NS_fsm, "ap_NS_fsm");
#endif

    }
    mHdltvinHandle.open("dut.hdltvin.dat");
    mHdltvoutHandle.open("dut.hdltvout.dat");
}

dut::~dut() {
    if (mVcdFile) 
        sc_close_vcd_trace_file(mVcdFile);

    mHdltvinHandle << "] " << endl;
    mHdltvoutHandle << "] " << endl;
    mHdltvinHandle.close();
    mHdltvoutHandle.close();
    delete result_U;
    delete grp_dut_cnn_xcel_fu_106;
}

void dut::thread_ap_clk_no_reset_() {
    if ( ap_rst.read() == ap_const_logic_1) {
        ap_CS_fsm = ap_ST_st1_fsm_0;
    } else {
        ap_CS_fsm = ap_NS_fsm.read();
    }
    if ( ap_rst.read() == ap_const_logic_1) {
        ap_reg_grp_dut_cnn_xcel_fu_106_ap_start = ap_const_logic_0;
    } else {
        if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_sig_cseq_ST_st2_fsm_1.read()) && 
             !esl_seteq<1,1,1>(strm_in_V_V_empty_n.read(), ap_const_logic_0))) {
            ap_reg_grp_dut_cnn_xcel_fu_106_ap_start = ap_const_logic_1;
        } else if (esl_seteq<1,1,1>(ap_const_logic_1, grp_dut_cnn_xcel_fu_106_ap_ready.read())) {
            ap_reg_grp_dut_cnn_xcel_fu_106_ap_start = ap_const_logic_0;
        }
    }
    if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_sig_cseq_ST_st5_fsm_4.read()) && 
         !esl_seteq<1,1,1>(strm_out_V_V_full_n.read(), ap_const_logic_0))) {
        i_reg_95 = i_1_reg_162.read();
    } else if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_sig_cseq_ST_st3_fsm_2.read()) && 
                !esl_seteq<1,1,1>(ap_const_logic_0, grp_dut_cnn_xcel_fu_106_ap_done.read()))) {
        i_reg_95 = ap_const_lv10_0;
    }
    if (esl_seteq<1,1,1>(ap_const_logic_1, ap_sig_cseq_ST_st4_fsm_3.read())) {
        i_1_reg_162 = i_1_fu_138_p2.read();
    }
    if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_sig_cseq_ST_st2_fsm_1.read()) && !esl_seteq<1,1,1>(strm_in_V_V_empty_n.read(), ap_const_logic_0))) {
        p_Result_s_reg_154 = p_Result_s_fu_124_p3.read();
    }
    if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_sig_cseq_ST_st1_fsm_0.read()) && !ap_sig_59.read())) {
        tmp_V_2_reg_149 = strm_in_V_V_dout.read();
    }
}

void dut::thread_ap_done() {
    if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_sig_cseq_ST_st4_fsm_3.read()) && 
         !esl_seteq<1,1,1>(exitcond_fu_132_p2.read(), ap_const_lv1_0))) {
        ap_done = ap_const_logic_1;
    } else {
        ap_done = ap_const_logic_0;
    }
}

void dut::thread_ap_idle() {
    if ((esl_seteq<1,1,1>(ap_const_logic_0, ap_start.read()) && 
         esl_seteq<1,1,1>(ap_const_logic_1, ap_sig_cseq_ST_st1_fsm_0.read()))) {
        ap_idle = ap_const_logic_1;
    } else {
        ap_idle = ap_const_logic_0;
    }
}

void dut::thread_ap_ready() {
    if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_sig_cseq_ST_st4_fsm_3.read()) && 
         !esl_seteq<1,1,1>(exitcond_fu_132_p2.read(), ap_const_lv1_0))) {
        ap_ready = ap_const_logic_1;
    } else {
        ap_ready = ap_const_logic_0;
    }
}

void dut::thread_ap_sig_110() {
    ap_sig_110 = esl_seteq<1,1,1>(ap_const_lv1_1, ap_CS_fsm.read().range(2, 2));
}

void dut::thread_ap_sig_20() {
    ap_sig_20 = esl_seteq<1,1,1>(ap_CS_fsm.read().range(0, 0), ap_const_lv1_1);
}

void dut::thread_ap_sig_44() {
    ap_sig_44 = esl_seteq<1,1,1>(ap_const_lv1_1, ap_CS_fsm.read().range(1, 1));
}

void dut::thread_ap_sig_53() {
    ap_sig_53 = esl_seteq<1,1,1>(ap_const_lv1_1, ap_CS_fsm.read().range(4, 4));
}

void dut::thread_ap_sig_59() {
    ap_sig_59 = (esl_seteq<1,1,1>(ap_start.read(), ap_const_logic_0) || esl_seteq<1,1,1>(strm_in_V_V_empty_n.read(), ap_const_logic_0));
}

void dut::thread_ap_sig_73() {
    ap_sig_73 = esl_seteq<1,1,1>(ap_const_lv1_1, ap_CS_fsm.read().range(3, 3));
}

void dut::thread_ap_sig_cseq_ST_st1_fsm_0() {
    if (ap_sig_20.read()) {
        ap_sig_cseq_ST_st1_fsm_0 = ap_const_logic_1;
    } else {
        ap_sig_cseq_ST_st1_fsm_0 = ap_const_logic_0;
    }
}

void dut::thread_ap_sig_cseq_ST_st2_fsm_1() {
    if (ap_sig_44.read()) {
        ap_sig_cseq_ST_st2_fsm_1 = ap_const_logic_1;
    } else {
        ap_sig_cseq_ST_st2_fsm_1 = ap_const_logic_0;
    }
}

void dut::thread_ap_sig_cseq_ST_st3_fsm_2() {
    if (ap_sig_110.read()) {
        ap_sig_cseq_ST_st3_fsm_2 = ap_const_logic_1;
    } else {
        ap_sig_cseq_ST_st3_fsm_2 = ap_const_logic_0;
    }
}

void dut::thread_ap_sig_cseq_ST_st4_fsm_3() {
    if (ap_sig_73.read()) {
        ap_sig_cseq_ST_st4_fsm_3 = ap_const_logic_1;
    } else {
        ap_sig_cseq_ST_st4_fsm_3 = ap_const_logic_0;
    }
}

void dut::thread_ap_sig_cseq_ST_st5_fsm_4() {
    if (ap_sig_53.read()) {
        ap_sig_cseq_ST_st5_fsm_4 = ap_const_logic_1;
    } else {
        ap_sig_cseq_ST_st5_fsm_4 = ap_const_logic_0;
    }
}

void dut::thread_exitcond_fu_132_p2() {
    exitcond_fu_132_p2 = (!i_reg_95.read().is_01() || !ap_const_lv10_240.is_01())? sc_lv<1>(): sc_lv<1>(i_reg_95.read() == ap_const_lv10_240);
}

void dut::thread_grp_dut_cnn_xcel_fu_106_ap_start() {
    grp_dut_cnn_xcel_fu_106_ap_start = ap_reg_grp_dut_cnn_xcel_fu_106_ap_start.read();
}

void dut::thread_i_1_fu_138_p2() {
    i_1_fu_138_p2 = (!i_reg_95.read().is_01() || !ap_const_lv10_1.is_01())? sc_lv<10>(): (sc_biguint<10>(i_reg_95.read()) + sc_biguint<10>(ap_const_lv10_1));
}

void dut::thread_p_Result_s_fu_124_p3() {
    p_Result_s_fu_124_p3 = esl_concat<17,32>(tmp_44_fu_120_p1.read(), tmp_V_2_reg_149.read());
}

void dut::thread_result_address0() {
    if (esl_seteq<1,1,1>(ap_const_logic_1, ap_sig_cseq_ST_st4_fsm_3.read())) {
        result_address0 =  (sc_lv<10>) (tmp_fu_144_p1.read());
    } else if (esl_seteq<1,1,1>(ap_const_logic_1, ap_sig_cseq_ST_st3_fsm_2.read())) {
        result_address0 = grp_dut_cnn_xcel_fu_106_output_V_address0.read();
    } else {
        result_address0 = "XXXXXXXXXX";
    }
}

void dut::thread_result_ce0() {
    if (esl_seteq<1,1,1>(ap_const_logic_1, ap_sig_cseq_ST_st4_fsm_3.read())) {
        result_ce0 = ap_const_logic_1;
    } else if (esl_seteq<1,1,1>(ap_const_logic_1, ap_sig_cseq_ST_st3_fsm_2.read())) {
        result_ce0 = grp_dut_cnn_xcel_fu_106_output_V_ce0.read();
    } else {
        result_ce0 = ap_const_logic_0;
    }
}

void dut::thread_strm_in_V_V_blk_n() {
    if (((esl_seteq<1,1,1>(ap_const_logic_1, ap_sig_cseq_ST_st1_fsm_0.read()) && 
          !esl_seteq<1,1,1>(ap_start.read(), ap_const_logic_0)) || 
         esl_seteq<1,1,1>(ap_const_logic_1, ap_sig_cseq_ST_st2_fsm_1.read()))) {
        strm_in_V_V_blk_n = strm_in_V_V_empty_n.read();
    } else {
        strm_in_V_V_blk_n = ap_const_logic_1;
    }
}

void dut::thread_strm_in_V_V_read() {
    if (((esl_seteq<1,1,1>(ap_const_logic_1, ap_sig_cseq_ST_st1_fsm_0.read()) && 
          !ap_sig_59.read()) || 
         (esl_seteq<1,1,1>(ap_const_logic_1, ap_sig_cseq_ST_st2_fsm_1.read()) && 
          !esl_seteq<1,1,1>(strm_in_V_V_empty_n.read(), ap_const_logic_0)))) {
        strm_in_V_V_read = ap_const_logic_1;
    } else {
        strm_in_V_V_read = ap_const_logic_0;
    }
}

void dut::thread_strm_out_V_V_blk_n() {
    if (esl_seteq<1,1,1>(ap_const_logic_1, ap_sig_cseq_ST_st5_fsm_4.read())) {
        strm_out_V_V_blk_n = strm_out_V_V_full_n.read();
    } else {
        strm_out_V_V_blk_n = ap_const_logic_1;
    }
}

void dut::thread_strm_out_V_V_din() {
    strm_out_V_V_din = result_q0.read();
}

void dut::thread_strm_out_V_V_write() {
    if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_sig_cseq_ST_st5_fsm_4.read()) && 
         !esl_seteq<1,1,1>(strm_out_V_V_full_n.read(), ap_const_logic_0))) {
        strm_out_V_V_write = ap_const_logic_1;
    } else {
        strm_out_V_V_write = ap_const_logic_0;
    }
}

void dut::thread_tmp_44_fu_120_p1() {
    tmp_44_fu_120_p1 = strm_in_V_V_dout.read().range(17-1, 0);
}

void dut::thread_tmp_fu_144_p1() {
    tmp_fu_144_p1 = esl_zext<64,10>(i_reg_95.read());
}

void dut::thread_ap_NS_fsm() {
    switch (ap_CS_fsm.read().to_uint64()) {
        case 1 : 
            if (!ap_sig_59.read()) {
                ap_NS_fsm = ap_ST_st2_fsm_1;
            } else {
                ap_NS_fsm = ap_ST_st1_fsm_0;
            }
            break;
        case 2 : 
            if (!esl_seteq<1,1,1>(strm_in_V_V_empty_n.read(), ap_const_logic_0)) {
                ap_NS_fsm = ap_ST_st3_fsm_2;
            } else {
                ap_NS_fsm = ap_ST_st2_fsm_1;
            }
            break;
        case 4 : 
            if (!esl_seteq<1,1,1>(ap_const_logic_0, grp_dut_cnn_xcel_fu_106_ap_done.read())) {
                ap_NS_fsm = ap_ST_st4_fsm_3;
            } else {
                ap_NS_fsm = ap_ST_st3_fsm_2;
            }
            break;
        case 8 : 
            if (!esl_seteq<1,1,1>(exitcond_fu_132_p2.read(), ap_const_lv1_0)) {
                ap_NS_fsm = ap_ST_st1_fsm_0;
            } else {
                ap_NS_fsm = ap_ST_st5_fsm_4;
            }
            break;
        case 16 : 
            if (!esl_seteq<1,1,1>(strm_out_V_V_full_n.read(), ap_const_logic_0)) {
                ap_NS_fsm = ap_ST_st4_fsm_3;
            } else {
                ap_NS_fsm = ap_ST_st5_fsm_4;
            }
            break;
        default : 
            ap_NS_fsm =  (sc_lv<5>) ("XXXXX");
            break;
    }
}

void dut::thread_hdltv_gen() {
    const char* dump_tv = std::getenv("AP_WRITE_TV");
    if (!(dump_tv && string(dump_tv) == "on")) return;

    wait();

    mHdltvinHandle << "[ " << endl;
    mHdltvoutHandle << "[ " << endl;
    int ap_cycleNo = 0;
    while (1) {
        wait();
        const char* mComma = ap_cycleNo == 0 ? " " : ", " ;
        mHdltvinHandle << mComma << "{"  <<  " \"ap_rst\" :  \"" << ap_rst.read() << "\" ";
        mHdltvinHandle << " , " <<  " \"ap_start\" :  \"" << ap_start.read() << "\" ";
        mHdltvoutHandle << mComma << "{"  <<  " \"ap_done\" :  \"" << ap_done.read() << "\" ";
        mHdltvoutHandle << " , " <<  " \"ap_idle\" :  \"" << ap_idle.read() << "\" ";
        mHdltvoutHandle << " , " <<  " \"ap_ready\" :  \"" << ap_ready.read() << "\" ";
        mHdltvinHandle << " , " <<  " \"strm_in_V_V_dout\" :  \"" << strm_in_V_V_dout.read() << "\" ";
        mHdltvinHandle << " , " <<  " \"strm_in_V_V_empty_n\" :  \"" << strm_in_V_V_empty_n.read() << "\" ";
        mHdltvoutHandle << " , " <<  " \"strm_in_V_V_read\" :  \"" << strm_in_V_V_read.read() << "\" ";
        mHdltvoutHandle << " , " <<  " \"strm_out_V_V_din\" :  \"" << strm_out_V_V_din.read() << "\" ";
        mHdltvinHandle << " , " <<  " \"strm_out_V_V_full_n\" :  \"" << strm_out_V_V_full_n.read() << "\" ";
        mHdltvoutHandle << " , " <<  " \"strm_out_V_V_write\" :  \"" << strm_out_V_V_write.read() << "\" ";
        mHdltvinHandle << "}" << std::endl;
        mHdltvoutHandle << "}" << std::endl;
        ap_cycleNo++;
    }
}

}

