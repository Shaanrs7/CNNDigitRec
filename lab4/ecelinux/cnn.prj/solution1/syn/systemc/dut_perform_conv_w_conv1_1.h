// ==============================================================
// File generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC
// Version: 2016.2
// Copyright (C) 1986-2016 Xilinx, Inc. All Rights Reserved.
// 
// ==============================================================

#ifndef __dut_perform_conv_w_conv1_1_H__
#define __dut_perform_conv_w_conv1_1_H__


#include <systemc>
using namespace sc_core;
using namespace sc_dt;




#include <iostream>
#include <fstream>

struct dut_perform_conv_w_conv1_1_ram : public sc_core::sc_module {

  static const unsigned DataWidth = 30;
  static const unsigned AddressRange = 4608;
  static const unsigned AddressWidth = 13;

//latency = 1
//input_reg = 1
//output_reg = 0
sc_core::sc_in <sc_lv<AddressWidth> > address0;
sc_core::sc_in <sc_logic> ce0;
sc_core::sc_out <sc_lv<DataWidth> > q0;
sc_core::sc_in <sc_lv<AddressWidth> > address1;
sc_core::sc_in <sc_logic> ce1;
sc_core::sc_out <sc_lv<DataWidth> > q1;
sc_core::sc_in<sc_logic> reset;
sc_core::sc_in<bool> clk;


sc_lv<DataWidth> ram[AddressRange];


   SC_CTOR(dut_perform_conv_w_conv1_1_ram) {
        ram[0] = "0b001101000001100011010110101111";
        ram[1] = "0b001010011100000000000100101111";
        ram[2] = "0b000010111110000011110111000000";
        ram[3] = "0b001011100010010010011101101111";
        ram[4] = "0b110110011111000111110110001111";
        ram[5] = "0b000011011011010101111011011100";
        ram[6] = "0b111101111010010011110001001111";
        ram[7] = "0b000100001110111110011011011111";
        ram[8] = "0b001001101000110100010001111111";
        ram[9] = "0b000010110100110011001000110011";
        ram[10] = "0b110000011001010011110010011111";
        ram[11] = "0b000100101011010010000001111111";
        ram[12] = "0b000011000100010100111100111011";
        ram[13] = "0b000010100110100000001000010011";
        ram[14] = "0b111111100011011010010001110110";
        ram[15] = "0b001011000001101101111000000000";
        ram[16] = "0b110111010100000001000101111111";
        ram[17] = "0b001000111000011100111011010000";
        ram[18] = "0b110010011101111111011111100000";
        ram[19] = "0b110010001011100101111111000000";
        ram[20] = "0b000011000111101011000101010000";
        ram[21] = "0b110100010101101101010110001111";
        ram[22] = "0b000111010010000000000010010000";
        ram[23] = "0b000001110011101101111000001111";
        ram[24] = "0b000010111100011011001111110000";
        ram[25] = "0b000011001011001011110100000111";
        ram[26] = "0b111011111001001001011000101111";
        ram[27] = "0b111100011011011011011100111011";
        ram[28] = "0b111010110010111100001011001000";
        ram[29] = "0b000110110001111111111110011000";
        ram[30] = "0b000100100001100001110000010000";
        ram[31] = "0b110010000001010010011011001111";
        ram[32] = "0b001001011101101000000011001111";
        ram[33] = "0b001000000001011001100000011111";
        ram[34] = "0b000110101010001010011011110000";
        ram[35] = "0b000001010110000100010111110100";
        ram[36] = "0b110010001010110101001101000000";
        ram[37] = "0b000010011111001101010111101000";
        ram[38] = "0b000111111100001001100100101111";
        ram[39] = "0b111111100011110100111000001010";
        ram[40] = "0b000010001001111011110000111100";
        ram[41] = "0b001010111101001100000101111111";
        ram[42] = "0b001110100111011100011000111111";
        ram[43] = "0b110101110000000100111100110000";
        ram[44] = "0b111100111101001111010101110011";
        ram[45] = "0b000001001111000100111011000100";
        ram[46] = "0b111100111101101110110010101111";
        ram[47] = "0b000010101100101011001001011111";
        ram[48] = "0b110011111111100111000101000000";
        ram[49] = "0b000000101111100001110011000001";
        ram[50] = "0b001101110100110111000010100000";
        ram[51] = "0b111011011011011001101000110111";
        ram[52] = "0b001010000111110111000110010000";
        ram[53] = "0b111101010000111110111011000011";
        ram[54] = "0b000111010001010010000001000111";
        ram[55] = "0b111100010100001001110110101111";
        ram[56] = "0b000101010010000101011110010000";
        ram[57] = "0b111011001110110010110111100111";
        ram[58] = "0b111100100001101000011010011011";
        ram[59] = "0b111000000100100101110110000111";
        ram[60] = "0b001001000010010001110110010000";
        ram[61] = "0b001101000000000100001110000000";
        ram[62] = "0b111011101101010111001001001000";
        ram[63] = "0b101111001101001010111001000000";
        ram[64] = "0b111111100010010100110011001111";
        ram[65] = "0b111001111010111111000101001111";
        ram[66] = "0b001000000101011011011111010000";
        ram[67] = "0b000110111101111010110111001111";
        ram[68] = "0b000100110110100101111000011111";
        ram[69] = "0b000001000001001011010000011010";
        ram[70] = "0b000001010111001110101001111001";
        ram[71] = "0b111111010011110001011011111010";
        for (unsigned i = 72; i < 4608 ; i = i + 1) {
            ram[i] = "0b000000000000000000000000000000";
        }


SC_METHOD(prc_write_0);
  sensitive<<clk.pos();


SC_METHOD(prc_write_1);
  sensitive<<clk.pos();
   }


void prc_write_0()
{
    if (ce0.read() == sc_dt::Log_1) 
    {
            if(address0.read().is_01() && address0.read().to_uint()<AddressRange)
              q0 = ram[address0.read().to_uint()];
            else
              q0 = sc_lv<DataWidth>();
    }
}


void prc_write_1()
{
    if (ce1.read() == sc_dt::Log_1) 
    {
            if(address1.read().is_01() && address1.read().to_uint()<AddressRange)
              q1 = ram[address1.read().to_uint()];
            else
              q1 = sc_lv<DataWidth>();
    }
}


}; //endmodule


SC_MODULE(dut_perform_conv_w_conv1_1) {


static const unsigned DataWidth = 30;
static const unsigned AddressRange = 4608;
static const unsigned AddressWidth = 13;

sc_core::sc_in <sc_lv<AddressWidth> > address0;
sc_core::sc_in<sc_logic> ce0;
sc_core::sc_out <sc_lv<DataWidth> > q0;
sc_core::sc_in <sc_lv<AddressWidth> > address1;
sc_core::sc_in<sc_logic> ce1;
sc_core::sc_out <sc_lv<DataWidth> > q1;
sc_core::sc_in<sc_logic> reset;
sc_core::sc_in<bool> clk;


dut_perform_conv_w_conv1_1_ram* meminst;


SC_CTOR(dut_perform_conv_w_conv1_1) {
meminst = new dut_perform_conv_w_conv1_1_ram("dut_perform_conv_w_conv1_1_ram");
meminst->address0(address0);
meminst->ce0(ce0);
meminst->q0(q0);

meminst->address1(address1);
meminst->ce1(ce1);
meminst->q1(q1);

meminst->reset(reset);
meminst->clk(clk);
}
~dut_perform_conv_w_conv1_1() {
    delete meminst;
}


};//endmodule
#endif
