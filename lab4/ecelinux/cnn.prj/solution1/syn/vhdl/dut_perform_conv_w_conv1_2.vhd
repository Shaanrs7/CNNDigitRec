-- ==============================================================
-- File generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC
-- Version: 2016.2
-- Copyright (C) 1986-2016 Xilinx, Inc. All Rights Reserved.
-- 
-- ==============================================================

library ieee; 
use ieee.std_logic_1164.all; 
use ieee.std_logic_unsigned.all;

entity dut_perform_conv_w_conv1_2_rom is 
    generic(
             dwidth     : integer := 29; 
             awidth     : integer := 13; 
             mem_size    : integer := 4608
    ); 
    port (
          addr0      : in std_logic_vector(awidth-1 downto 0); 
          ce0       : in std_logic; 
          q0         : out std_logic_vector(dwidth-1 downto 0);
          addr1      : in std_logic_vector(awidth-1 downto 0); 
          ce1       : in std_logic; 
          q1         : out std_logic_vector(dwidth-1 downto 0);
          clk       : in std_logic
    ); 
end entity; 


architecture rtl of dut_perform_conv_w_conv1_2_rom is 

signal addr0_tmp : std_logic_vector(awidth-1 downto 0); 
signal addr1_tmp : std_logic_vector(awidth-1 downto 0); 
type mem_array is array (0 to mem_size-1) of std_logic_vector (dwidth-1 downto 0); 
signal mem : mem_array := (
    0 => "01000011010010000011110011111", 1 => "11000100010000111000110110111", 
    2 => "00001000100010011110011000001", 3 => "00010001010101011011010110111", 
    4 => "10101010010110100100010100000", 5 => "01010001001000001011111100000", 
    6 => "01000110101011100100000000000", 7 => "00000110111100000011110011111", 
    8 => "00111000011101011000111010000", 9 => "11101110010100010100101111011", 
    10 => "11111001100001010010000000100", 11 => "11010000001001101010111110000", 
    12 => "11001110011101100011011010000", 13 => "10101000111001011011110000000", 
    14 => "00110101110100101010010101111", 15 => "11111111001011011000101110001", 
    16 => "10111011010110111100010100000", 17 => "00111011010110011000101011111", 
    18 => "11110110100100101001100010001", 19 => "11110110111110010001001110000", 
    20 => "00010101110111000010001110111", 21 => "00111110100001101000000110000", 
    22 => "00100110100100110001111110000", 23 => "10000010010110100101101001111", 
    24 => "01001000000100001101101011111", 25 => "11110010110111100011100110101", 
    26 => "00101000001001110100011001000", 27 => "00101001011110111111111101000", 
    28 => "00110101100111111100000100000", 29 => "00111000111100000011111101000", 
    30 => "00100100001101111111000000111", 31 => "01011000010010111101100100000", 
    32 => "11010111101011001110101111111", 33 => "00010001101100010001111101000", 
    34 => "00011011000000100010001000000", 35 => "11000100101011111011111100000", 
    36 => "11001100100011100011101000111", 37 => "11100101100101100100110110100", 
    38 => "01000101110000010110010000000", 39 => "10001011010111010001001001111", 
    40 => "01001011111100110011111101111", 41 => "10000001010100010010000101111", 
    42 => "11110100111100111000100100010", 43 => "11111101010001000011111000101", 
    44 => "11100101101001011010011010000", 45 => "00111000111101010101000001000", 
    46 => "11101001111000001110100001000", 47 => "00100100111111001110010110111", 
    48 => "11100110101011000100011000011", 49 => "01010001110100100011011110000", 
    50 => "11111111010101011110010001001", 51 => "11110101001110100010000010111", 
    52 => "11101011101010100001101101011", 53 => "11010010111001011011101010000", 
    54 => "01101101011000011111001111111", 55 => "11101100010000000101000111000", 
    56 => "00010110000110100010001001000", 57 => "01010111101001010001101100000", 
    58 => "11001010100011101000101101111", 59 => "00100001011010001011101000111", 
    60 => "10111101010101111011111000000", 61 => "11100011100000001011110011111", 
    62 => "01000110101101010101100011111", 63 => "11000101001010111010000011000", 
    64 => "00001110001000100110100101010", 65 => "00011001000100010001001100111", 
    66 => "00100111000010011100100001000", 67 => "10000011110000101000010101111", 
    68 => "11111010010001011110010110100", 69 => "00001110110010000001001010101", 
    70 => "00111010101111100010001101111", 71 => "00100101010010010011001001000", 
    72 to 4607=> "00000000000000000000000000000" );


attribute EQUIVALENT_REGISTER_REMOVAL : string;
begin 


memory_access_guard_0: process (addr0) 
begin
      addr0_tmp <= addr0;
--synthesis translate_off
      if (CONV_INTEGER(addr0) > mem_size-1) then
           addr0_tmp <= (others => '0');
      else 
           addr0_tmp <= addr0;
      end if;
--synthesis translate_on
end process;

memory_access_guard_1: process (addr1) 
begin
      addr1_tmp <= addr1;
--synthesis translate_off
      if (CONV_INTEGER(addr1) > mem_size-1) then
           addr1_tmp <= (others => '0');
      else 
           addr1_tmp <= addr1;
      end if;
--synthesis translate_on
end process;

p_rom_access: process (clk)  
begin 
    if (clk'event and clk = '1') then
        if (ce0 = '1') then 
            q0 <= mem(CONV_INTEGER(addr0_tmp)); 
        end if;
        if (ce1 = '1') then 
            q1 <= mem(CONV_INTEGER(addr1_tmp)); 
        end if;
    end if;
end process;

end rtl;


Library IEEE;
use IEEE.std_logic_1164.all;

entity dut_perform_conv_w_conv1_2 is
    generic (
        DataWidth : INTEGER := 29;
        AddressRange : INTEGER := 4608;
        AddressWidth : INTEGER := 13);
    port (
        reset : IN STD_LOGIC;
        clk : IN STD_LOGIC;
        address0 : IN STD_LOGIC_VECTOR(AddressWidth - 1 DOWNTO 0);
        ce0 : IN STD_LOGIC;
        q0 : OUT STD_LOGIC_VECTOR(DataWidth - 1 DOWNTO 0);
        address1 : IN STD_LOGIC_VECTOR(AddressWidth - 1 DOWNTO 0);
        ce1 : IN STD_LOGIC;
        q1 : OUT STD_LOGIC_VECTOR(DataWidth - 1 DOWNTO 0));
end entity;

architecture arch of dut_perform_conv_w_conv1_2 is
    component dut_perform_conv_w_conv1_2_rom is
        port (
            clk : IN STD_LOGIC;
            addr0 : IN STD_LOGIC_VECTOR;
            ce0 : IN STD_LOGIC;
            q0 : OUT STD_LOGIC_VECTOR;
            addr1 : IN STD_LOGIC_VECTOR;
            ce1 : IN STD_LOGIC;
            q1 : OUT STD_LOGIC_VECTOR);
    end component;



begin
    dut_perform_conv_w_conv1_2_rom_U :  component dut_perform_conv_w_conv1_2_rom
    port map (
        clk => clk,
        addr0 => address0,
        ce0 => ce0,
        q0 => q0,
        addr1 => address1,
        ce1 => ce1,
        q1 => q1);

end architecture;


