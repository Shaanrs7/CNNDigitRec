-- ==============================================================
-- File generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC
-- Version: 2016.2
-- Copyright (C) 1986-2016 Xilinx, Inc. All Rights Reserved.
-- 
-- ==============================================================

library ieee; 
use ieee.std_logic_1164.all; 
use ieee.std_logic_unsigned.all;

entity dut_perform_conv_w_conv1_3_rom is 
    generic(
             dwidth     : integer := 30; 
             awidth     : integer := 13; 
             mem_size    : integer := 4608
    ); 
    port (
          addr0      : in std_logic_vector(awidth-1 downto 0); 
          ce0       : in std_logic; 
          q0         : out std_logic_vector(dwidth-1 downto 0);
          addr1      : in std_logic_vector(awidth-1 downto 0); 
          ce1       : in std_logic; 
          q1         : out std_logic_vector(dwidth-1 downto 0);
          clk       : in std_logic
    ); 
end entity; 


architecture rtl of dut_perform_conv_w_conv1_3_rom is 

signal addr0_tmp : std_logic_vector(awidth-1 downto 0); 
signal addr1_tmp : std_logic_vector(awidth-1 downto 0); 
type mem_array is array (0 to mem_size-1) of std_logic_vector (dwidth-1 downto 0); 
signal mem : mem_array := (
    0 => "000000100000000110100000001110", 1 => "111011101111110100001010110111", 
    2 => "110110111000011010001011000000", 3 => "110000010010000001101100000000", 
    4 => "110101011010110010000000001111", 5 => "000101101011001101011111110111", 
    6 => "000011111001111101101011001011", 7 => "000111101000000000111101010000", 
    8 => "110011000010111101001010111111", 9 => "000100011000111010000111010000", 
    10 => "111100010010011100010110010111", 11 => "001110110000011011110001000000", 
    12 => "000011001011011011101010100011", 13 => "000101011111101001001000001000", 
    14 => "111111000111101010010010110010", 15 => "110110011111011111010101100000", 
    16 => "111101000000101001100001101111", 17 => "000111000001010111101000110111", 
    18 => "000110001111111011001010010000", 19 => "000111010111011000110011110111", 
    20 => "111001101110100011001001010111", 21 => "000011000110000110010110011011", 
    22 => "111110110000010011100011011100", 23 => "111001010011000100110110101000", 
    24 => "111100011000001100110111101000", 25 => "000010100001101011111110000000", 
    26 => "000000000010000001111110001101", 27 => "000110000001011110100001110000", 
    28 => "101101111100010001011001100000", 29 => "000011011000101000110001001111", 
    30 => "101111110010001000110001000000", 31 => "000001111001101111000010010010", 
    32 => "111100010110110101110010101111", 33 => "001110100011011111000000100000", 
    34 => "000110100111011011010010010000", 35 => "000010011101111100000011000011", 
    36 => "000011101110111011001110000111", 37 => "000101011101101001010001100000", 
    38 => "110010111000010111101111100000", 39 => "111011110001000000111000110000", 
    40 => "000011111111001101111011001111", 41 => "111011111011101100001101101111", 
    42 => "000111011100100011101101011111", 43 => "111001101100101110111000101000", 
    44 => "001010110010101000101011101111", 45 => "000100100000101101100000001000", 
    46 => "110010000110111111111100100000", 47 => "101111010101010111010100000000", 
    48 => "000101100010010111110000001111", 49 => "110100101101001011100011000000", 
    50 => "111110011011111110111010011101", 51 => "000110000011101001010011010111", 
    52 => "001110000101110000001000001111", 53 => "000001011100101010101101100011", 
    54 => "111111110100110000100100000001", 55 => "111101100000100010110100101011", 
    56 => "111110101110111101011100000011", 57 => "111100111111110101010001001100", 
    58 => "110001000001010110001001011111", 59 => "111000010111010011110110010000", 
    60 => "111111000011010000111011010010", 61 => "001011001000101010001111010000", 
    62 => "000000010101101001000101111010", 63 => "001010101100011010101100011111", 
    64 => "001101110010010101011000011111", 65 => "000110110100000001101110101000", 
    66 => "111011001100011110100001000000", 67 => "110001100010111001100100110000", 
    68 => "000000100100100110011110000101", 69 => "000001010010011010101010010111", 
    70 => "000101011110000010110110010111", 71 => "110100000100101000110100101111", 
    72 to 4607=> "000000000000000000000000000000" );


attribute EQUIVALENT_REGISTER_REMOVAL : string;
begin 


memory_access_guard_0: process (addr0) 
begin
      addr0_tmp <= addr0;
--synthesis translate_off
      if (CONV_INTEGER(addr0) > mem_size-1) then
           addr0_tmp <= (others => '0');
      else 
           addr0_tmp <= addr0;
      end if;
--synthesis translate_on
end process;

memory_access_guard_1: process (addr1) 
begin
      addr1_tmp <= addr1;
--synthesis translate_off
      if (CONV_INTEGER(addr1) > mem_size-1) then
           addr1_tmp <= (others => '0');
      else 
           addr1_tmp <= addr1;
      end if;
--synthesis translate_on
end process;

p_rom_access: process (clk)  
begin 
    if (clk'event and clk = '1') then
        if (ce0 = '1') then 
            q0 <= mem(CONV_INTEGER(addr0_tmp)); 
        end if;
        if (ce1 = '1') then 
            q1 <= mem(CONV_INTEGER(addr1_tmp)); 
        end if;
    end if;
end process;

end rtl;


Library IEEE;
use IEEE.std_logic_1164.all;

entity dut_perform_conv_w_conv1_3 is
    generic (
        DataWidth : INTEGER := 30;
        AddressRange : INTEGER := 4608;
        AddressWidth : INTEGER := 13);
    port (
        reset : IN STD_LOGIC;
        clk : IN STD_LOGIC;
        address0 : IN STD_LOGIC_VECTOR(AddressWidth - 1 DOWNTO 0);
        ce0 : IN STD_LOGIC;
        q0 : OUT STD_LOGIC_VECTOR(DataWidth - 1 DOWNTO 0);
        address1 : IN STD_LOGIC_VECTOR(AddressWidth - 1 DOWNTO 0);
        ce1 : IN STD_LOGIC;
        q1 : OUT STD_LOGIC_VECTOR(DataWidth - 1 DOWNTO 0));
end entity;

architecture arch of dut_perform_conv_w_conv1_3 is
    component dut_perform_conv_w_conv1_3_rom is
        port (
            clk : IN STD_LOGIC;
            addr0 : IN STD_LOGIC_VECTOR;
            ce0 : IN STD_LOGIC;
            q0 : OUT STD_LOGIC_VECTOR;
            addr1 : IN STD_LOGIC_VECTOR;
            ce1 : IN STD_LOGIC;
            q1 : OUT STD_LOGIC_VECTOR);
    end component;



begin
    dut_perform_conv_w_conv1_3_rom_U :  component dut_perform_conv_w_conv1_3_rom
    port map (
        clk => clk,
        addr0 => address0,
        ce0 => ce0,
        q0 => q0,
        addr1 => address1,
        ce1 => ce1,
        q1 => q1);

end architecture;


