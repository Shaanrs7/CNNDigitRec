-- ==============================================================
-- File generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC
-- Version: 2016.2
-- Copyright (C) 1986-2016 Xilinx, Inc. All Rights Reserved.
-- 
-- ==============================================================

library ieee; 
use ieee.std_logic_1164.all; 
use ieee.std_logic_unsigned.all;

entity dut_perform_conv_b_conv1_rom is 
    generic(
             dwidth     : integer := 28; 
             awidth     : integer := 6; 
             mem_size    : integer := 64
    ); 
    port (
          addr0      : in std_logic_vector(awidth-1 downto 0); 
          ce0       : in std_logic; 
          q0         : out std_logic_vector(dwidth-1 downto 0);
          clk       : in std_logic
    ); 
end entity; 


architecture rtl of dut_perform_conv_b_conv1_rom is 

signal addr0_tmp : std_logic_vector(awidth-1 downto 0); 
type mem_array is array (0 to mem_size-1) of std_logic_vector (dwidth-1 downto 0); 
signal mem : mem_array := (
    0 => "0110111100101100101110000000", 1 => "0110111011101100000001100000", 
    2 => "1000010000010100110010000000", 3 => "0110101101111011100101001000", 
    4 => "1011000010010011101110011111", 5 => "0111110111100010111111100111", 
    6 => "0111010110110100001001000111", 7 => "1001010101011111011111000000", 
    8 => "1010111110011111101111010000", 9 => "0111100100100000010111101000", 
    10 => "0111111000100010011000011000", 11 => "0110010110101010111010101111", 
    12 => "1000000111010111100011010000", 13 => "1000010111000011111010011111", 
    14 => "0110101101100010100101001111", 15 => "0101110110111001001110000000", 
    16 => "0110100100011110110010000000", 17 => "0111011101111101101010100000", 
    18 => "0101110011101111110000000111", 19 => "0111111001011010001101111111", 
    20 => "1000010010101111111011000000", 21 => "1000111101011010010010011111", 
    22 => "0110110100001101010101110000", 23 => "0111100011100010010000010000", 
    24 => "0111001011101000000100010111", 25 => "0110111001101100011111100111", 
    26 => "1010111001001000111110000000", 27 => "0111000000111001001110111111", 
    28 => "0111111010100101111011101000", 29 => "0110010110010001000111101000", 
    30 => "1001100100010101101110010000", 31 => "0110011011010101001111000000", 
    32 to 63=> "0000000000000000000000000000" );


attribute EQUIVALENT_REGISTER_REMOVAL : string;
begin 


memory_access_guard_0: process (addr0) 
begin
      addr0_tmp <= addr0;
--synthesis translate_off
      if (CONV_INTEGER(addr0) > mem_size-1) then
           addr0_tmp <= (others => '0');
      else 
           addr0_tmp <= addr0;
      end if;
--synthesis translate_on
end process;

p_rom_access: process (clk)  
begin 
    if (clk'event and clk = '1') then
        if (ce0 = '1') then 
            q0 <= mem(CONV_INTEGER(addr0_tmp)); 
        end if;
    end if;
end process;

end rtl;


Library IEEE;
use IEEE.std_logic_1164.all;

entity dut_perform_conv_b_conv1 is
    generic (
        DataWidth : INTEGER := 28;
        AddressRange : INTEGER := 64;
        AddressWidth : INTEGER := 6);
    port (
        reset : IN STD_LOGIC;
        clk : IN STD_LOGIC;
        address0 : IN STD_LOGIC_VECTOR(AddressWidth - 1 DOWNTO 0);
        ce0 : IN STD_LOGIC;
        q0 : OUT STD_LOGIC_VECTOR(DataWidth - 1 DOWNTO 0));
end entity;

architecture arch of dut_perform_conv_b_conv1 is
    component dut_perform_conv_b_conv1_rom is
        port (
            clk : IN STD_LOGIC;
            addr0 : IN STD_LOGIC_VECTOR;
            ce0 : IN STD_LOGIC;
            q0 : OUT STD_LOGIC_VECTOR);
    end component;



begin
    dut_perform_conv_b_conv1_rom_U :  component dut_perform_conv_b_conv1_rom
    port map (
        clk => clk,
        addr0 => address0,
        ce0 => ce0,
        q0 => q0);

end architecture;


