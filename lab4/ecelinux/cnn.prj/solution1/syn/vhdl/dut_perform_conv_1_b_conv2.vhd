-- ==============================================================
-- File generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC
-- Version: 2016.2
-- Copyright (C) 1986-2016 Xilinx, Inc. All Rights Reserved.
-- 
-- ==============================================================

library ieee; 
use ieee.std_logic_1164.all; 
use ieee.std_logic_unsigned.all;

entity dut_perform_conv_1_b_conv2_rom is 
    generic(
             dwidth     : integer := 27; 
             awidth     : integer := 6; 
             mem_size    : integer := 64
    ); 
    port (
          addr0      : in std_logic_vector(awidth-1 downto 0); 
          ce0       : in std_logic; 
          q0         : out std_logic_vector(dwidth-1 downto 0);
          clk       : in std_logic
    ); 
end entity; 


architecture rtl of dut_perform_conv_1_b_conv2_rom is 

signal addr0_tmp : std_logic_vector(awidth-1 downto 0); 
type mem_array is array (0 to mem_size-1) of std_logic_vector (dwidth-1 downto 0); 
signal mem : mem_array := (
    0 => "110110101110100101101110000", 1 => "110110001001010111111010000", 
    2 => "110111011000111010100010111", 3 => "110010100001001101110000000", 
    4 => "110011111111010001100110111", 5 => "111000100111100001101010111", 
    6 => "101111100110100000010000000", 7 => "111001011111011000000001000", 
    8 => "110101000100111101100101000", 9 => "110011001001100000100111111", 
    10 => "111100100011101100101000111", 11 => "111001111000011110101111000", 
    12 => "110011101000101100101000111", 13 => "110100100111001110010110000", 
    14 => "111000000111100101101101000", 15 => "110000100000110110001111000", 
    16 => "110101000010111100001000111", 17 => "110100100100010011100111000", 
    18 => "110110011000100001000111000", 19 => "110100011100010011101011111", 
    20 => "111010101001000011001101111", 21 => "110111010111001101010000000", 
    22 => "111000011100000011101001000", 23 => "110010011100101001101011111", 
    24 => "110110010111011011111101000", 25 => "110111001101110100100110000", 
    26 => "110111010111110010111010111", 27 => "110010011100101100110010111", 
    28 => "110101101010000111110110111", 29 => "110100110010101101101111111", 
    30 => "111000101111100101111000111", 31 => "110011111000101000010010111", 
    32 => "110101110011100111011001111", 33 => "110100010111000001001111111", 
    34 => "111001110010001100110110111", 35 => "111000010001011101100011111", 
    36 => "110111011011010110011101000", 37 => "110011111010010110100010111", 
    38 => "110101000111000101101000111", 39 => "110111111010101111011010111", 
    40 => "111000000000101100101000111", 41 => "110011110011101000110000111", 
    42 => "110110110100011000010010111", 43 => "111011100000110010000010111", 
    44 => "110101001111010011111011111", 45 => "110110010011110111000001111", 
    46 => "110101101101100011000001111", 47 => "110101100111110010010001000", 
    48 => "101110011001111100101001000", 49 => "111000100000110100100100000", 
    50 => "110101110000001010011101000", 51 => "110010100111010101001001000", 
    52 => "110111000000110001101111111", 53 => "111010101111100000000010111", 
    54 => "111100011110000111101001000", 55 => "111000101011011110011100111", 
    56 => "110111011110111001110100111", 57 => "110111100101011011000000111", 
    58 => "110111011100111100001011111", 59 => "110011001100110011001101000", 
    60 => "111000111100011001110011111", 61 => "110101000111100100100101111", 
    62 => "110000101111011010110110000", 63 => "110000001111011110011101111" );


attribute EQUIVALENT_REGISTER_REMOVAL : string;
begin 


memory_access_guard_0: process (addr0) 
begin
      addr0_tmp <= addr0;
--synthesis translate_off
      if (CONV_INTEGER(addr0) > mem_size-1) then
           addr0_tmp <= (others => '0');
      else 
           addr0_tmp <= addr0;
      end if;
--synthesis translate_on
end process;

p_rom_access: process (clk)  
begin 
    if (clk'event and clk = '1') then
        if (ce0 = '1') then 
            q0 <= mem(CONV_INTEGER(addr0_tmp)); 
        end if;
    end if;
end process;

end rtl;


Library IEEE;
use IEEE.std_logic_1164.all;

entity dut_perform_conv_1_b_conv2 is
    generic (
        DataWidth : INTEGER := 27;
        AddressRange : INTEGER := 64;
        AddressWidth : INTEGER := 6);
    port (
        reset : IN STD_LOGIC;
        clk : IN STD_LOGIC;
        address0 : IN STD_LOGIC_VECTOR(AddressWidth - 1 DOWNTO 0);
        ce0 : IN STD_LOGIC;
        q0 : OUT STD_LOGIC_VECTOR(DataWidth - 1 DOWNTO 0));
end entity;

architecture arch of dut_perform_conv_1_b_conv2 is
    component dut_perform_conv_1_b_conv2_rom is
        port (
            clk : IN STD_LOGIC;
            addr0 : IN STD_LOGIC_VECTOR;
            ce0 : IN STD_LOGIC;
            q0 : OUT STD_LOGIC_VECTOR);
    end component;



begin
    dut_perform_conv_1_b_conv2_rom_U :  component dut_perform_conv_1_b_conv2_rom
    port map (
        clk => clk,
        addr0 => address0,
        ce0 => ce0,
        q0 => q0);

end architecture;


