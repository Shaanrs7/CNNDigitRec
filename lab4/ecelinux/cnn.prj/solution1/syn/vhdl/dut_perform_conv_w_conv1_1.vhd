-- ==============================================================
-- File generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC
-- Version: 2016.2
-- Copyright (C) 1986-2016 Xilinx, Inc. All Rights Reserved.
-- 
-- ==============================================================

library ieee; 
use ieee.std_logic_1164.all; 
use ieee.std_logic_unsigned.all;

entity dut_perform_conv_w_conv1_1_rom is 
    generic(
             dwidth     : integer := 30; 
             awidth     : integer := 13; 
             mem_size    : integer := 4608
    ); 
    port (
          addr0      : in std_logic_vector(awidth-1 downto 0); 
          ce0       : in std_logic; 
          q0         : out std_logic_vector(dwidth-1 downto 0);
          addr1      : in std_logic_vector(awidth-1 downto 0); 
          ce1       : in std_logic; 
          q1         : out std_logic_vector(dwidth-1 downto 0);
          clk       : in std_logic
    ); 
end entity; 


architecture rtl of dut_perform_conv_w_conv1_1_rom is 

signal addr0_tmp : std_logic_vector(awidth-1 downto 0); 
signal addr1_tmp : std_logic_vector(awidth-1 downto 0); 
type mem_array is array (0 to mem_size-1) of std_logic_vector (dwidth-1 downto 0); 
signal mem : mem_array := (
    0 => "001101000001100011010110101111", 1 => "001010011100000000000100101111", 
    2 => "000010111110000011110111000000", 3 => "001011100010010010011101101111", 
    4 => "110110011111000111110110001111", 5 => "000011011011010101111011011100", 
    6 => "111101111010010011110001001111", 7 => "000100001110111110011011011111", 
    8 => "001001101000110100010001111111", 9 => "000010110100110011001000110011", 
    10 => "110000011001010011110010011111", 11 => "000100101011010010000001111111", 
    12 => "000011000100010100111100111011", 13 => "000010100110100000001000010011", 
    14 => "111111100011011010010001110110", 15 => "001011000001101101111000000000", 
    16 => "110111010100000001000101111111", 17 => "001000111000011100111011010000", 
    18 => "110010011101111111011111100000", 19 => "110010001011100101111111000000", 
    20 => "000011000111101011000101010000", 21 => "110100010101101101010110001111", 
    22 => "000111010010000000000010010000", 23 => "000001110011101101111000001111", 
    24 => "000010111100011011001111110000", 25 => "000011001011001011110100000111", 
    26 => "111011111001001001011000101111", 27 => "111100011011011011011100111011", 
    28 => "111010110010111100001011001000", 29 => "000110110001111111111110011000", 
    30 => "000100100001100001110000010000", 31 => "110010000001010010011011001111", 
    32 => "001001011101101000000011001111", 33 => "001000000001011001100000011111", 
    34 => "000110101010001010011011110000", 35 => "000001010110000100010111110100", 
    36 => "110010001010110101001101000000", 37 => "000010011111001101010111101000", 
    38 => "000111111100001001100100101111", 39 => "111111100011110100111000001010", 
    40 => "000010001001111011110000111100", 41 => "001010111101001100000101111111", 
    42 => "001110100111011100011000111111", 43 => "110101110000000100111100110000", 
    44 => "111100111101001111010101110011", 45 => "000001001111000100111011000100", 
    46 => "111100111101101110110010101111", 47 => "000010101100101011001001011111", 
    48 => "110011111111100111000101000000", 49 => "000000101111100001110011000001", 
    50 => "001101110100110111000010100000", 51 => "111011011011011001101000110111", 
    52 => "001010000111110111000110010000", 53 => "111101010000111110111011000011", 
    54 => "000111010001010010000001000111", 55 => "111100010100001001110110101111", 
    56 => "000101010010000101011110010000", 57 => "111011001110110010110111100111", 
    58 => "111100100001101000011010011011", 59 => "111000000100100101110110000111", 
    60 => "001001000010010001110110010000", 61 => "001101000000000100001110000000", 
    62 => "111011101101010111001001001000", 63 => "101111001101001010111001000000", 
    64 => "111111100010010100110011001111", 65 => "111001111010111111000101001111", 
    66 => "001000000101011011011111010000", 67 => "000110111101111010110111001111", 
    68 => "000100110110100101111000011111", 69 => "000001000001001011010000011010", 
    70 => "000001010111001110101001111001", 71 => "111111010011110001011011111010", 
    72 to 4607=> "000000000000000000000000000000" );


attribute EQUIVALENT_REGISTER_REMOVAL : string;
begin 


memory_access_guard_0: process (addr0) 
begin
      addr0_tmp <= addr0;
--synthesis translate_off
      if (CONV_INTEGER(addr0) > mem_size-1) then
           addr0_tmp <= (others => '0');
      else 
           addr0_tmp <= addr0;
      end if;
--synthesis translate_on
end process;

memory_access_guard_1: process (addr1) 
begin
      addr1_tmp <= addr1;
--synthesis translate_off
      if (CONV_INTEGER(addr1) > mem_size-1) then
           addr1_tmp <= (others => '0');
      else 
           addr1_tmp <= addr1;
      end if;
--synthesis translate_on
end process;

p_rom_access: process (clk)  
begin 
    if (clk'event and clk = '1') then
        if (ce0 = '1') then 
            q0 <= mem(CONV_INTEGER(addr0_tmp)); 
        end if;
        if (ce1 = '1') then 
            q1 <= mem(CONV_INTEGER(addr1_tmp)); 
        end if;
    end if;
end process;

end rtl;


Library IEEE;
use IEEE.std_logic_1164.all;

entity dut_perform_conv_w_conv1_1 is
    generic (
        DataWidth : INTEGER := 30;
        AddressRange : INTEGER := 4608;
        AddressWidth : INTEGER := 13);
    port (
        reset : IN STD_LOGIC;
        clk : IN STD_LOGIC;
        address0 : IN STD_LOGIC_VECTOR(AddressWidth - 1 DOWNTO 0);
        ce0 : IN STD_LOGIC;
        q0 : OUT STD_LOGIC_VECTOR(DataWidth - 1 DOWNTO 0);
        address1 : IN STD_LOGIC_VECTOR(AddressWidth - 1 DOWNTO 0);
        ce1 : IN STD_LOGIC;
        q1 : OUT STD_LOGIC_VECTOR(DataWidth - 1 DOWNTO 0));
end entity;

architecture arch of dut_perform_conv_w_conv1_1 is
    component dut_perform_conv_w_conv1_1_rom is
        port (
            clk : IN STD_LOGIC;
            addr0 : IN STD_LOGIC_VECTOR;
            ce0 : IN STD_LOGIC;
            q0 : OUT STD_LOGIC_VECTOR;
            addr1 : IN STD_LOGIC_VECTOR;
            ce1 : IN STD_LOGIC;
            q1 : OUT STD_LOGIC_VECTOR);
    end component;



begin
    dut_perform_conv_w_conv1_1_rom_U :  component dut_perform_conv_w_conv1_1_rom
    port map (
        clk => clk,
        addr0 => address0,
        ce0 => ce0,
        q0 => q0,
        addr1 => address1,
        ce1 => ce1,
        q1 => q1);

end architecture;


