-- ==============================================================
-- File generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC
-- Version: 2016.2
-- Copyright (C) 1986-2016 Xilinx, Inc. All Rights Reserved.
-- 
-- ==============================================================

library ieee; 
use ieee.std_logic_1164.all; 
use ieee.std_logic_unsigned.all;

entity dut_perform_conv_w_conv1_0_rom is 
    generic(
             dwidth     : integer := 30; 
             awidth     : integer := 13; 
             mem_size    : integer := 4608
    ); 
    port (
          addr0      : in std_logic_vector(awidth-1 downto 0); 
          ce0       : in std_logic; 
          q0         : out std_logic_vector(dwidth-1 downto 0);
          addr1      : in std_logic_vector(awidth-1 downto 0); 
          ce1       : in std_logic; 
          q1         : out std_logic_vector(dwidth-1 downto 0);
          clk       : in std_logic
    ); 
end entity; 


architecture rtl of dut_perform_conv_w_conv1_0_rom is 

signal addr0_tmp : std_logic_vector(awidth-1 downto 0); 
signal addr1_tmp : std_logic_vector(awidth-1 downto 0); 
type mem_array is array (0 to mem_size-1) of std_logic_vector (dwidth-1 downto 0); 
signal mem : mem_array := (
    0 => "110111101101110100011101001111", 1 => "001101000001100011010110101111", 
    2 => "001000011010010000011110011111", 3 => "000000100000000110100000001110", 
    4 => "110111111000111000001100001111", 5 => "001010011100000000000100101111", 
    6 => "111000100010000111000110110111", 7 => "111011101111110100001010110111", 
    8 => "000101011101110001110000011111", 9 => "000010111110000011110111000000", 
    10 => "000001000100010011110011000001", 11 => "110110111000011010001011000000", 
    12 => "001101110110000011101010001111", 13 => "001011100010010010011101101111", 
    14 => "000010001010101011011010110111", 15 => "110000010010000001101100000000", 
    16 => "000000111111100111010001100100", 17 => "110110011111000111110110001111", 
    18 => "110101010010110100100010100000", 19 => "110101011010110010000000001111", 
    20 => "111101001101101011101110001111", 21 => "000011011011010101111011011100", 
    22 => "001010001001000001011111100000", 23 => "000101101011001101011111110111", 
    24 => "110110001010000010100111101111", 25 => "111101111010010011110001001111", 
    26 => "001000110101011100100000000000", 27 => "000011111001111101101011001011", 
    28 => "000011110100110011000000011011", 29 => "000100001110111110011011011111", 
    30 => "000000110111100000011110011111", 31 => "000111101000000000111101010000", 
    32 => "110100101001111001011100011111", 33 => "001001101000110100010001111111", 
    34 => "000111000011101011000111010000", 35 => "110011000010111101001010111111", 
    36 => "110100110111000000010000100000", 37 => "000010110100110011001000110011", 
    38 => "111101110010100010100101111011", 39 => "000100011000111010000111010000", 
    40 => "101110011000101111001111111111", 41 => "110000011001010011110010011111", 
    42 => "111111001100001010010000000100", 43 => "111100010010011100010110010111", 
    44 => "000111111110011110101100100000", 45 => "000100101011010010000001111111", 
    46 => "111010000001001101010111110000", 47 => "001110110000011011110001000000", 
    48 => "111011010100101101010010010000", 49 => "000011000100010100111100111011", 
    50 => "111001110011101100011011010000", 51 => "000011001011011011101010100011", 
    52 => "000000011000011100000100001000", 53 => "000010100110100000001000010011", 
    54 => "110101000111001011011110000000", 55 => "000101011111101001001000001000", 
    56 => "110011100010111000010001000000", 57 => "111111100011011010010001110110", 
    58 => "000110101110100101010010101111", 59 => "111111000111101010010010110010", 
    60 => "110011111101010101101111000000", 61 => "001011000001101101111000000000", 
    62 => "111111111001011011000101110001", 63 => "110110011111011111010101100000", 
    64 => "111011011101110000101111111000", 65 => "110111010100000001000101111111", 
    66 => "110111011010110111100010100000", 67 => "111101000000101001100001101111", 
    68 => "000110110011111100100101010000", 69 => "001000111000011100111011010000", 
    70 => "000111011010110011000101011111", 71 => "000111000001010111101000110111", 
    72 => "110101000010100011000011010000", 73 => "110010011101111111011111100000", 
    74 => "111110110100100101001100010001", 75 => "000110001111111011001010010000", 
    76 => "000010111010000000110001011100", 77 => "110010001011100101111111000000", 
    78 => "111110110111110010001001110000", 79 => "000111010111011000110011110111", 
    80 => "110011010100110100001110001111", 81 => "000011000111101011000101010000", 
    82 => "000010101110111000010001110111", 83 => "111001101110100011001001010111", 
    84 => "000001000111000111011001010000", 85 => "110100010101101101010110001111", 
    86 => "000111110100001101000000110000", 87 => "000011000110000110010110011011", 
    88 => "101110011011101010001111111111", 89 => "000111010010000000000010010000", 
    90 => "000100110100100110001111110000", 91 => "111110110000010011100011011100", 
    92 => "111011101010000010100010101111", 93 => "000001110011101101111000001111", 
    94 => "110000010010110100101101001111", 95 => "111001010011000100110110101000", 
    96 => "000101100010001000011001001000", 97 => "000010111100011011001111110000", 
    98 => "001001000000100001101101011111", 99 => "111100011000001100110111101000", 
    100 => "000100110010011101000100000111", 101 => "000011001011001011110100000111", 
    102 => "111110010110111100011100110101", 103 => "000010100001101011111110000000", 
    104 => "110110010111100000000111011111", 105 => "111011111001001001011000101111", 
    106 => "000101000001001110100011001000", 107 => "000000000010000001111110001101", 
    108 => "000011000100011111111010101100", 109 => "111100011011011011011100111011", 
    110 => "000101001011110111111111101000", 111 => "000110000001011110100001110000", 
    112 => "110110111001010101100101111111", 113 => "111010110010111100001011001000", 
    114 => "000110101100111111100000100000", 115 => "101101111100010001011001100000", 
    116 => "111100101001001111001110110000", 117 => "000110110001111111111110011000", 
    118 => "000111000111100000011111101000", 119 => "000011011000101000110001001111", 
    120 => "110010001001011100110100010000", 121 => "000100100001100001110000010000", 
    122 => "000100100001101111111000000111", 123 => "101111110010001000110001000000", 
    124 => "110111010100101100010101010000", 125 => "110010000001010010011011001111", 
    126 => "001011000010010111101100100000", 127 => "000001111001101111000010010010", 
    128 => "110100011111111100110101110000", 129 => "001001011101101000000011001111", 
    130 => "111010111101011001110101111111", 131 => "111100010110110101110010101111", 
    132 => "111111110010011111011000111000", 133 => "001000000001011001100000011111", 
    134 => "000010001101100010001111101000", 135 => "001110100011011111000000100000", 
    136 => "111110000001010001110000110010", 137 => "000110101010001010011011110000", 
    138 => "000011011000000100010001000000", 139 => "000110100111011011010010010000", 
    140 => "000011011011100000110101101000", 141 => "000001010110000100010111110100", 
    142 => "111000100101011111011111100000", 143 => "000010011101111100000011000011", 
    144 => "000001011011111110101011000011", 145 => "110010001010110101001101000000", 
    146 => "111001100100011100011101000111", 147 => "000011101110111011001110000111", 
    148 => "001110100011111101111101100000", 149 => "000010011111001101010111101000", 
    150 => "111100101100101100100110110100", 151 => "000101011101101001010001100000", 
    152 => "111100010101110111001000101100", 153 => "000111111100001001100100101111", 
    154 => "001000101110000010110010000000", 155 => "110010111000010111101111100000", 
    156 => "000101010100111110110100000000", 157 => "111111100011110100111000001010", 
    158 => "110001011010111010001001001111", 159 => "111011110001000000111000110000", 
    160 => "111010001111101011111100101111", 161 => "000010001001111011110000111100", 
    162 => "001001011111100110011111101111", 163 => "000011111111001101111011001111", 
    164 => "001010000011101011100001011111", 165 => "001010111101001100000101111111", 
    166 => "110000001010100010010000101111", 167 => "111011111011101100001101101111", 
    168 => "111110011111100111010111000000", 169 => "001110100111011100011000111111", 
    170 => "111110100111100111000100100010", 171 => "000111011100100011101101011111", 
    172 => "000111111010110110000110011000", 173 => "110101110000000100111100110000", 
    174 => "111111101010001000011111000101", 175 => "111001101100101110111000101000", 
    176 => "001000001111100000111111110000", 177 => "111100111101001111010101110011", 
    178 => "111100101101001011010011010000", 179 => "001010110010101000101011101111", 
    180 => "000011111101100111100110000000", 181 => "000001001111000100111011000100", 
    182 => "000111000111101010101000001000", 183 => "000100100000101101100000001000", 
    184 => "000010110110111010100001010100", 185 => "111100111101101110110010101111", 
    186 => "111101001111000001110100001000", 187 => "110010000110111111111100100000", 
    188 => "111000000010101111001001100111", 189 => "000010101100101011001001011111", 
    190 => "000100100111111001110010110111", 191 => "101111010101010111010100000000", 
    192 => "000111111010011010011010111000", 193 => "110011111111100111000101000000", 
    194 => "111100110101011000100011000011", 195 => "000101100010010111110000001111", 
    196 => "111000001001111110111000101000", 197 => "000000101111100001110011000001", 
    198 => "001010001110100100011011110000", 199 => "110100101101001011100011000000", 
    200 => "000010000001110101100101100000", 201 => "001101110100110111000010100000", 
    202 => "111111111010101011110010001001", 203 => "111110011011111110111010011101", 
    204 => "000110111101000011111100010111", 205 => "111011011011011001101000110111", 
    206 => "111110101001110100010000010111", 207 => "000110000011101001010011010111", 
    208 => "001001011101110011011100101111", 209 => "001010000111110111000110010000", 
    210 => "111101011101010100001101101011", 211 => "001110000101110000001000001111", 
    212 => "111000110000010000010100100000", 213 => "111101010000111110111011000011", 
    214 => "111010010111001011011101010000", 215 => "000001011100101010101101100011", 
    216 => "000011111100110101110101111000", 217 => "000111010001010010000001000111", 
    218 => "001101101011000011111001111111", 219 => "111111110100110000100100000001", 
    220 => "111011001000000100001010001111", 221 => "111100010100001001110110101111", 
    222 => "111101100010000000101000111000", 223 => "111101100000100010110100101011", 
    224 => "110101010010101000011011000000", 225 => "000101010010000101011110010000", 
    226 => "000010110000110100010001001000", 227 => "111110101110111101011100000011", 
    228 => "110110111011000000101100110000", 229 => "111011001110110010110111100111", 
    230 => "001010111101001010001101100000", 231 => "111100111111110101010001001100", 
    232 => "001111100001011011111001001111", 233 => "111100100001101000011010011011", 
    234 => "111001010100011101000101101111", 235 => "110001000001010110001001011111", 
    236 => "111101011110110101010001110000", 237 => "111000000100100101110110000111", 
    238 => "000100001011010001011101000111", 239 => "111000010111010011110110010000", 
    240 => "111110111001010100011110010110", 241 => "001001000010010001110110010000", 
    242 => "110111101010101111011111000000", 243 => "111111000011010000111011010010", 
    244 => "111010001001100111001100010111", 245 => "001101000000000100001110000000", 
    246 => "111100011100000001011110011111", 247 => "001011001000101010001111010000", 
    248 => "111001101110001101000000101000", 249 => "111011101101010111001001001000", 
    250 => "001000110101101010101100011111", 251 => "000000010101101001000101111010", 
    252 => "111000110101100100010011111000", 253 => "101111001101001010111001000000", 
    254 => "111000101001010111010000011000", 255 => "001010101100011010101100011111", 
    256 => "000111011011011000000111001111", 257 => "111111100010010100110011001111", 
    258 => "000001110001000100110100101010", 259 => "001101110010010101011000011111", 
    260 => "000000100111011011010110101100", 261 => "111001111010111111000101001111", 
    262 => "000011001000100010001001100111", 263 => "000110110100000001101110101000", 
    264 => "110110010110101110110001100000", 265 => "001000000101011011011111010000", 
    266 => "000100111000010011100100001000", 267 => "111011001100011110100001000000", 
    268 => "001000001000011111111101101111", 269 => "000110111101111010110111001111", 
    270 => "110000011110000101000010101111", 271 => "110001100010111001100100110000", 
    272 => "000111011110010001011011101000", 273 => "000100110110100101111000011111", 
    274 => "111111010010001011110010110100", 275 => "000000100100100110011110000101", 
    276 => "000001000010010100000010100011", 277 => "000001000001001011010000011010", 
    278 => "000001110110010000001001010101", 279 => "000001010010011010101010010111", 
    280 => "000100110110000100110000010111", 281 => "000001010111001110101001111001", 
    282 => "000111010101111100010001101111", 283 => "000101011110000010110110010111", 
    284 => "111101011111011011111110110011", 285 => "111111010011110001011011111010", 
    286 => "000100101010010010011001001000", 287 => "110100000100101000110100101111", 
    288 to 4607=> "000000000000000000000000000000" );


attribute EQUIVALENT_REGISTER_REMOVAL : string;
begin 


memory_access_guard_0: process (addr0) 
begin
      addr0_tmp <= addr0;
--synthesis translate_off
      if (CONV_INTEGER(addr0) > mem_size-1) then
           addr0_tmp <= (others => '0');
      else 
           addr0_tmp <= addr0;
      end if;
--synthesis translate_on
end process;

memory_access_guard_1: process (addr1) 
begin
      addr1_tmp <= addr1;
--synthesis translate_off
      if (CONV_INTEGER(addr1) > mem_size-1) then
           addr1_tmp <= (others => '0');
      else 
           addr1_tmp <= addr1;
      end if;
--synthesis translate_on
end process;

p_rom_access: process (clk)  
begin 
    if (clk'event and clk = '1') then
        if (ce0 = '1') then 
            q0 <= mem(CONV_INTEGER(addr0_tmp)); 
        end if;
        if (ce1 = '1') then 
            q1 <= mem(CONV_INTEGER(addr1_tmp)); 
        end if;
    end if;
end process;

end rtl;


Library IEEE;
use IEEE.std_logic_1164.all;

entity dut_perform_conv_w_conv1_0 is
    generic (
        DataWidth : INTEGER := 30;
        AddressRange : INTEGER := 4608;
        AddressWidth : INTEGER := 13);
    port (
        reset : IN STD_LOGIC;
        clk : IN STD_LOGIC;
        address0 : IN STD_LOGIC_VECTOR(AddressWidth - 1 DOWNTO 0);
        ce0 : IN STD_LOGIC;
        q0 : OUT STD_LOGIC_VECTOR(DataWidth - 1 DOWNTO 0);
        address1 : IN STD_LOGIC_VECTOR(AddressWidth - 1 DOWNTO 0);
        ce1 : IN STD_LOGIC;
        q1 : OUT STD_LOGIC_VECTOR(DataWidth - 1 DOWNTO 0));
end entity;

architecture arch of dut_perform_conv_w_conv1_0 is
    component dut_perform_conv_w_conv1_0_rom is
        port (
            clk : IN STD_LOGIC;
            addr0 : IN STD_LOGIC_VECTOR;
            ce0 : IN STD_LOGIC;
            q0 : OUT STD_LOGIC_VECTOR;
            addr1 : IN STD_LOGIC_VECTOR;
            ce1 : IN STD_LOGIC;
            q1 : OUT STD_LOGIC_VECTOR);
    end component;



begin
    dut_perform_conv_w_conv1_0_rom_U :  component dut_perform_conv_w_conv1_0_rom
    port map (
        clk => clk,
        addr0 => address0,
        ce0 => ce0,
        q0 => q0,
        addr1 => address1,
        ce1 => ce1,
        q1 => q1);

end architecture;


